{
    "docs": [
        {
            "location": "/",
            "text": "Python\n\n\nPyPI - the Python Package Index\n\n\nThe Hitchhiker\u2019s Guide to Python\n\n\n\n\nVirtual environment\n\n\n# virtualenvwrapper\n\nmkvirtualenv --python\n=\n`\nwhich python3\n`\n EnvName\nworkon EnvName\n\n\n# Python's venv module\n\npython3 -m venv virtual_environment_name\n\n# -m module-name\n\n\ncd\n virtual_environment_name\n\nsource\n bin/activate\n\n\n\n\n\n\n\nPython\u2019s default arguments are evaluated once when the function is defined, not each time the function is called.\n\n\ndef\n \nappend_to\n(\nelement\n,\n \nto\n=\n[]):\n\n  \nto\n.\nappend\n(\nelement\n)\n\n  \nreturn\n \nto\n\n\n\nmy_list\n \n=\n \nappend_to\n(\n12\n)\n\n\nprint\n \nmy_list\n\n\n\nmy_other_list\n \n=\n \nappend_to\n(\n42\n)\n\n\nprint\n \nmy_other_list\n\n\n\n# [12]\n\n\n# [12, 42]\n\n\n\n\n\n\nA new list is created once when the function is defined, and the same list is used in each successive call.\n\n\nWhat you should do instead:\n\n\ndef\n \nappend_to\n(\nelement\n,\n \nto\n=\nNone\n):\n\n    \nif\n \nto\n \nis\n \nNone\n:\n\n        \nto\n \n=\n \n[]\n\n    \nto\n.\nappend\n(\nelement\n)\n\n    \nreturn\n \nto\n\n\n\n\n\n\n\n\nPython\u2019s closures are late binding. This means that the values of variables used in closures are looked up at the time the inner function is called.\n\n\n\n\n+\n operator creates a new object\n\n\npath\n \n=\n \n[]\n\n\npath\n \n=\n \npath\n \n+\n \n[\nstart\n]\n   \n# creates a new list\n\n\n\n\n\n\n\n\nIf \nsend\n has multiple recipients, it is better to define it explicitly: \nsend(message, recipients)\n  and call it with \nsend('Hello', ['God', 'Mom', 'Cthulhu'])\n than \nsend(message, *args)\n. This way, the user of the function can manipulate the recipient list as a list beforehand, and it opens the possibility to pass any sequence, including iterators, that cannot be unpacked as other sequences.\n\n\n\n\nIf it's not unique to an instance, it doesn't belong to an instance variable.\n\n\n\n\nLambda's (make function) syntax is similar to def, but leaves out:\n\n\n\n\nname of the function\n\n\nparameters parenthesis\n\n\nreturn keyword\n\n\n\n\ndef\n \nfn\n(\na\n,\n \nb\n,\n \nc\n):\n\n    \nreturn\n \na\n \n+\n \nb\n \n+\n \nc\n\n\n\nlambda\n \na\n,\n \nb\n,\n \nc\n:\n \na\n \n+\n \nb\n \n+\n \nc\n\n\n\n\n\n\n\n\nFloor division \nx.__floordiv__(y)\n\n\nx\n \n//\n \ny\n\n\n\n\n\n\nFloor division and modulo\n\n\ndivmod\n(\nx\n,\n \ny\n)\n\n\n\n\n\n\n\n\nelse\n in loops\n\n\nfor\n:\n\n    \n...\n\n\nelse\n:\n   \n# no break (loop not terminated by a break statement)\n\n    \n...\n\n\n\n\n\n\n\n\nSimultaneous state update\n\n\n\n\neliminates out of order update errors\n\n\nallows high level thinking\n\n\n\n\nx\n,\n \ny\n \n=\n \ny\n,\n \nx\n \n+\n \ny\n\n\n\nx\n,\n \ny\n,\n \ndx\n,\n \ndy\n \n=\n \n(\nx\n \n+\n \ndx\n \n*\n \nt\n,\n\n                \ny\n \n+\n \ndy\n \n*\n \nt\n,\n\n                \n...\n \n,\n\n                \n...\n)\n\n\n\n\n\n\n\n\nUse decorators to factor out administrative logic\n\n\n@cache\n\n\ndef\n \nweb_lookup\n(\nurl\n):\n\n    \nreturn\n \nurllib\n.\nurlopen\n(\nurl\n)\n.\nread\n()\n\n\n\n\ndef\n \nfoo\n():\n\n    \n# do something\n\n\n\ndef\n \ndecorator\n(\nfunc\n):\n\n    \n# manipulate func\n\n    \nreturn\n \nfunc\n\n\n\nfoo\n \n=\n \ndecorator\n(\nfoo\n)\n  \n# Manually decorate\n\n\n\n@decorator\n\n\ndef\n \nbar\n():\n\n    \n# Do something\n\n\n# bar() is decorated\n\n\n\n\n\n\n\n\nContext manager\n\n\nfrom\n \ncontextlib\n \nimport\n \nsuppress\n\n\nwith\n \nsuppress\n(\nFileNotFoundError\n):\n\n    \nos\n.\nremove\n(\n'somefile.tmp'\n)\n\n\n\n\n\n\n\n\nRaymond Hettinger - \nTransforming Code into Beautiful, Idiomatic Python\n\n\nimport\n \nfunctools\n\n\nimport\n \noperator\n\n\nfunctools\n.\nreduce\n(\noperator\n.\nadd\n,\n \nrange\n(\n10\n))\n    \n# ((0 + 1) + 2) + 3 ...\n\n\nsum\n(\nrange\n(\n10\n))\n\n\n\n>>>\n \nmap\n(\nstr\n,\n \nrange\n(\n10\n))\n\n\n>>>\n \nnext\n(\n_\n)\n   \n# _ result of last invocation\n\n\nmap\n(\nlambda\n \nm\n:\n \nm\n.\nname\n,\n \nsequence\n)\n\n\n\nfilter\n(\nlambda\n \nx\n:\nx\n \n>\n \n0\n,\n \n[\n0\n,\n \n-\n1\n,\n \n3\n,\n \n4\n,\n \n-\n2\n])\n   \n# <filter at 0x7f...> [3, 4]\n\n\n\n\n\n\n\n\nNamed slices\n\n\nname\n \n=\n \nslice\n(\n0\n,\n \n10\n)\n\n\nlastname\n \n=\n \nslice\n(\n10\n,\n \n20\n)\n\n\nline\n[\nname\n],\n \nline\n[\nlastname\n]\n\n\n\n\n\n\n\n\n\n\nAssertions are not for error handling (like checking arguments, we have exceptions for that)\n\n\nAssert results of implementation logic are sane \nassert result >= 0\n\n\nAsserts should only fail if the code is wrong\n\n\nAssertions can be turned off\n\n\n\n\n\n\nrandom.choices\n selects with replacement (puts it back in urn before next draw)\n\n\nfrom\n \nrandom\n \nimport\n \nchoices\n,\n \nsample\n\n\nsample\n([\n1\n,\n2\n,\n3\n],\n \nk\n=\n3\n)\n    \n# [1, 2, 3]\n\n\nchoices\n([\n1\n,\n2\n,\n3\n],\n \nk\n=\n3\n)\n   \n# [1, 1, 1]\n\n\n\n\n\n\n\n\nDo while construct\n\n\nwhile\n \nTrue\n:\n\n    \nstuff\n()\n\n    \nif\n \nfail_condition\n:\n\n        \nbreak\n\n\n\n\n\n\n\n\nsys.path\n current search path (imports).\n\n\n\n\ntimeit\n module\n\n\nfrom\n \ntimeit\n \nimport\n \nTimer\n\n\n\ndef\n \nget_digits1\n(\ntext\n):\n\n    \nc\n \n=\n \n\"\"\n\n    \nfor\n \ni\n \nin\n \ntext\n:\n\n        \nif\n \ni\n.\nisdigit\n():\n\n            \nc\n \n+=\n \ni\n\n    \nreturn\n \nc\n\n\n\ndef\n \nget_digits2\n(\ntext\n):\n\n    \nreturn\n \nfilter\n(\nstr\n.\nisdigit\n,\n \ntext\n)\n\n\n\ndef\n \nget_digits3\n(\ntext\n):\n\n    \nreturn\n \n''\n.\njoin\n(\nc\n \nfor\n \nc\n \nin\n \ntext\n \nif\n \nc\n.\nisdigit\n())\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \ncount\n \n=\n \n5000000\n\n    \nt\n \n=\n \nTimer\n(\n\"get_digits1('abcdef123456789ghijklmnopq123456789')\"\n,\n\n              \n\"from __main__ import get_digits1\"\n)\n\n    \nprint\n \nt\n.\ntimeit\n(\nnumber\n=\ncount\n)\n\n\n    \nt\n \n=\n \nTimer\n(\n\"get_digits2('abcdef123456789ghijklmnopq123456789')\"\n,\n\n              \n\"from __main__ import get_digits2\"\n)\n\n    \nprint\n \nt\n.\ntimeit\n(\nnumber\n=\ncount\n)\n\n\n    \nt\n \n=\n \nTimer\n(\n\"get_digits3('abcdef123456789ghijklmnopq123456789')\"\n,\n \n              \n\"from __main__ import get_digits3\"\n)\n\n    \nprint\n \nt\n.\ntimeit\n(\nnumber\n=\ncount\n)\n\n\n\n# 19.990989106  # Your original solution\n\n\n# 16.7035926379 # Mine solution\n\n\n# 24.8638381019 # Accepted solution\n\n\n\n\n\n\nDebugging\n\n\npython -i file.py\n\n\nipython -i file.py\n      \n# inspect interactively after running script\n\n\npython -m pdb script.py\n       \n# post-mortem (on exceptions)\n\n\nimport pdb; pdb.pm()\n          \n# pdb post-mortem\n\n\nimport pdb; pdb.set_trace()\n   \n# manual breakpoint\n\n  \nhelp\n\n  \ncontinue\n  \n# next breakpoint\n\n  \nnext\n      \n# next line, current context\n\n  \nstep\n      \n# next, step into functions\n\n  \nlist\n      \n# show context\n\n  \nup\n\n  \nreturn\n\n  \nbt\n\n\n\nfrom IPython import embed; embed()\n\n\n\ntype()\n\n\ncallable('mystring'.__add__)\n\n\nTrue.__class__\n\n\nTrue.__class__.__bases__\n\n\nbool.__mro__\n\n\ninspect.getmro(type(True))\n\n\ndir(5.0)\n\n\nid(obj)\n\n\na is b\n\n\ndel a\n   \n# Remove a from the namespace\n\n\ndel\n     \n# keyword\n\n\nlocals()\n\n\n\npython -m cProfile script.py\n\n\nimport cProfile\n\n\ncProfile.run('test()')\n\n\n\n\n\n\nMethod Resolution Order or MRO\n\n\n>>> pprint(LoggingOD.__mro__)\n(<class '__main__.LoggingOD'>,\n <class '__main__.LoggingDict'>,\n <class 'collections.OrderedDict'>,\n <class 'dict'>,\n <class 'object'>)\n\n>>> LoggingOD.__bases__\n(LoggingDict, OrderedDict)\n\n\n\n\n\nsuper()\n calls parents or ancestors of your children.\n\n\nsuper()\n means \"next in line\" (method resolution order).\n\n\n\n\nchildren get called before their parents\n\n\nparents stay in order\n\n\n\n\nPython\u2019s super() considered super!\n by Raymond Hettinger\n\n\nDebugging pretty printing\n\n\nprint\n(\njson\n.\ndumps\n(\nobj\n,\n \nindent\n=\n4\n,\n \nsort_keys\n=\nTrue\n))\n\n\n\nany_list\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\ndir\n(\nany_list\n)\n\n\nhelp\n(\nany_list\n.\nreverse\n)\n\n\n\n\n\n\nPlace breakpoints in except clauses\n\n\ntry\n:\n\n  \n# code\n\n\nexcept\n \nValueError\n:\n\n  \nimport\n \npdb\n;\n \npdb\n.\nset_trace\n()\n\n\n\nfrom\n \nitertools\n \nimport\n \nchain\n\n\nflatten\n \n=\n \nchain\n.\nfrom_iterable\n\n\nnested\n \n=\n \n[[\n1\n,\n2\n],\n \n[\n3\n,\n4\n],\n \n[\n4\n,\n5\n]]\n\n\nflatten\n(\nnested\n)\n   \n# 1, 2, 3, 4, 5\n\n\n\ndef\n \ntrace\n(\nf\n):\n\n    \n\"Print a trace of the input and output of a function on one line.\"\n\n    \ndef\n \ntraced_f\n(\n*\nargs\n):\n\n        \nresult\n \n=\n \nf\n(\n*\nargs\n)\n\n        \nprint\n(\n'{}({}) = {}'\n.\nformat\n(\n\n          \nf\n.\n__name__\n,\n \n          \n', '\n.\njoin\n(\nmap\n(\nstr\n,\n \nargs\n)),\n \nresult\n)\n\n        \n)\n\n        \nreturn\n \nresult\n\n    \nreturn\n \ntraced_f\n\n\n\n\n\n\nLogging\n\n\nimport\n \nlogging\n\n\n# logging.basicConfig(level=logging.DEBUG)  # default WARNING\n\n\n\nlogging\n.\ndebug\n(\n'debug message'\n)\n\n\nlogging\n.\ninfo\n(\n'info message'\n)\n\n\nlogging\n.\nwarning\n(\n'warning message'\n)\n\n\n\n\n\n\nTesting\n\n\nunittest      \n# standard lib\n\nunittest.mock\npytest\npytest --pdb  \n# Dropping to PDB (Python Debugger) on failures\n\n\n\n\n\n\nPycharm debug tests\n\n\n\n\nSet breakpoints\n\n\nAttach debugger in python console\n\n\nImport and call pytest  \nimport\n \npytest\n\n\npytest\n.\nmain\n(\nargs\n=\n[\n__file__\n])\n\n\n\n\n\n\n\n\n\n\n\n\nExtract the functionality that doesn't need to talk to the database to a separate method and test it separately.\n\n\nJupyter Notebook\n\n\n!\n \nls -l\n     \n# shell commands\n\n\n%\n \nmagic\n\n\n%% time\n     \n# single run\n\n\n%%\n \ntimeit\n   \n# multiple runs\n\n\n%%\n \nprun\n     \n# profiling\n\n\n\n\n\n\nDjango\n\n\nModel field arguments\n\n\nnull\n: If True, Django will store blank values as NULL in the database for fields where this is appropriate (a CharField will instead store an empty string). The default is False.\n\n\nblank\n: If True, the field is allowed to be blank in your forms. The default is False, which means that Django's form validation will force you to enter a value. This is often used with null=True , because if you're going to allow blank values, you also want the database to be able to represent them appropriately.\n\n\n\n\n{%\n \nblock\n \ntitle\n \n%}\nLogin | \n{{\n \nblock\n.super\n \n}}{%\n \nendblock\n \ntitle\n \n%}\n\n\n\n\n\n\nBeyond PEP 8 by Raymond Hettinger\n\n\n\n\nrecognize non-pythonic APIs\n\n\ndon't get distracted by PEP 8, focus first on Pythonic versus NonPythonic\n\n\nwhen needed write an adapter class\n\n\navoid unnecessary packaging in favor of simpler imports\n\n\ncreate custom exceptions\n\n\nuse properties instead of getter methods\n\n\ncreate a context manager for recurring set-up and teardown logic\n\n\nuse magic methods: \n__len__\n, \n__getitem__\n\n\nadd good \n__repr__\n for better debuggability\ndef\n \n__repr__\n(\nself\n):\n\n    \nreturn\n \n'{}({})'\n.\nformat\n(\nself\n.\n__class__\n.\n__name__\n,\n \nself\n.\ndata\n)\n\n\n\n\n\n\n\n\n\n\nDesign Patterns with Python - Pluralsight\n\n\nInterface - Abstract Base Class\n\n\n\n\nBehavioral\n\n\nStrategy Pattern\n\n\nObserver Pattern\n\n\n\n\n\n\n\n\nUnit TEsting with Python - Pluralsight\n\n\nUnit tests run in memory.\n\n\nIt's not unit test if it uses...\n\n\n\n\nthe file system\n\n\na database\n\n\nthe network\n\n\n\n\nRegression - something that used to work, doesn't anymore.\n\n\nTest Double - like 'Stunt Double'\n\n\n\n\nTest Stub     (hard codded answer)\n\n\nFake Object   (real implementation, yet unsuitable for production)\n\n\nMock Object   (was method called?)\n\n\nTest spy      (query afterwards what happened)\n\n\nDummy Object  (interface requires an argument, not used by the test)\n\n\n\n\nThree kinds of Assert\n\n\n\n\nCheck the return value or an exception\n\n\nCheck a state change (public API)\n\n\nCheck a method call (mock or spy)\n\n\n\n\nMonkey Patching\n\n\nPython Epiphanies - Safari\n\n\n\n\nA decorator changes or adds to the functionality of a function either by\n\nmodifying its arguments before the function is called, or changing its return\n\nvalue afterwards, or both.\n\n\n\n\nDecorators\n\n\n\n\npass the body of the defined function to the decorator function\n\n\nmodify namespace, the name of the defined function points to the decorator function's return value\n\n\n\n\nDesigning Data Structures in Python, George T. Heineman - Safari\n\n\ndef\n \ngetMin\n(\nself\n):\n\n    \nif\n \nself\n.\nroot\n \nis\n \nNone\n:\n\n        \nraise\n \nValueError\n(\n'Binary Tree is empty'\n)\n\n    \nn\n \n=\n \nself\n.\nroot\n\n    \nwhile\n \nn\n.\nleft\n:\n\n        \nn\n \n=\n \nn\n.\nleft\n\n    \nreturn\n \nn\n.\nvalue\n\n\n\n\n\n\nPython Beyond The Basics - Object Oriented Programming\n\n\nObject attribute lookup hierarchy\n\n\n\n\ninstance\n\n\nclass\n\n\nany class from which the class inherits\n\n\n\n\nPython Data Structures - Safari\n\n\nif\n \n'key'\n \nnot\n \nin\n \ndictionary\n:\n\n    \ndictionary\n[\n'key'\n]\n \n=\n \nset\n()\n\n\ndictionary\n[\n'key'\n]\n.\nadd\n(\n'value'\n)\n\n\n\ndictionary\n.\nsetdefault\n(\n'key'\n,\n \nset\n())\n.\nadd\n(\n'value'\n)\n\n\n\nfrom\n \ncollections\n \nimport\n \ndefaultdict\n\n\n\nset\n.\nremove\n(\nitem\n)\n\n\nset\n.\ndiscard\n(\nitem\n)\n   \n# no KeyError\n\n\nfrozenset\n()\n         \n# imutable\n\n\n\n\n\n\nPython Programming Language, David Beazley - Safari\n\n\nfor\n \nidx\n,\n \nitem\n \nin\n \nenumerate\n(\nitems\n,\n \nstart\n=\n1\n):\n\n    \npass\n\n\n\ngetattr\n(\nobj\n,\n \n'name'\n)\n        \n# obj.name\n\n\nsetattr\n(\nobj\n,\n \n'cost'\n,\n \n10\n)\n    \n# obj.cost = 10\n\n\ndel\n \nobj\n.\nname\n\n\nobj\n.\n__dict__\n\n\nobj\n.\n__class__\n.\n__dict__\n\n\nvars\n(\nobj\n.\n__class__\n)\n\n\n\n@property\n\n\n@price.setter\n\n\n\nafter\n(\n5\n,\n \nlambda\n:\n \ngreeting\n(\n'Guido'\n))\n\n\n\nfunc\n.\n__name__\n\n\n\n\n\n\nDive into Python3\n\n\nSeparate code from data.\n\ne.g. Pluralization rules are data, they belong in a separate file.\n\n\nImplement cache.\n\n\nModern Python by Raymond Hettinger\n\n\nLambda\n\n\n\n\nmake function\n\n\ndefer computation, make a promise\n\n  Run a computation at some point in the future\nf\n \n=\n \nlambda\n \n:\n \nx\n \n**\n \ny\n\n\nf\n()\n\n\n\n\n\n\n\n\n\n\nzip *\n means transpose\n\n\nzip(*data)\n\n\n\n\n\ndefaultdict\n\n\n\n\nuse for grouping data (list, set)\n\n\naccumulation\n\n\nreverse one-to-many mapping\n\n\n\n\nExpand wildcard\n\n\nglob.glob('*.txt')\n\n\n\n\n\nWrap in csv reader\n\n\nimport\n \ncsv\n\n\nwith\n \nopen\n(\n'file.csv'\n)\n \nas\n \nf\n:\n\n    \nfor\n \nrow\n \nin\n \ncsv\n.\nreader\n(\nf\n):\n\n        \nprint\n(\nrow\n)\n\n\n\n\n\n\nPython: Programming efficiently - Lynda.com\n\n\nitertools\n.\nchain\n(\niter1\n,\n \niter2\n)\n   \n# concatenate\n\n\ni1\n,\n \ni2\n \n=\n \nitertools\n.\ntee\n(\niter\n,\n \n2\n)\n \n# duplicate\n\n\nitertools\n.\naccumulate\n(\niter\n)\n      \n# running sum\n\n\nitertools\n.\nproduct\n(\niter1\n,\n \niter2\n)\n \n# element-by-element product\n\n\n\n\n\n\nSets cannot have a mutable element, like list, set or dictionary, as its elements.\n\n\n\n\nx and y\n first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned.\n\n\nx or y\n first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned.\n\n\nNote that neither \nand\n nor \nor\n restrict the value and type they return to False and True, but rather return the last evaluated argument.\n\n\n\n\nPython Data Structures - Safari\n\n\nObject attributes without underscores\n\n\nany_dict\n \n=\n \n{}\n\n\n[\nattr\n \nfor\n \nattr\n \nin\n \ndir\n(\nany_dict\n)\n \nif\n \n'__'\n \nnot\n \nin\n \nattr\n]\n\n\n\n\n\n\nWorking with Algorithms in Python, by George Heineman - Safari\n\n\n\n\nbinary array search\n\n\nbinary search tree\n\n\nbalanced binary search tree\n\n\nmergesort\n\n\nexponentiation by squaring\n\n\npeg solitaire\n\n\nmagic squares\n\n\n\n\nGraph representation\n\n\n\n\nadjacency matrix (dense edges)\n\n\nadjacency list (sparse edges)\n\n\n\n\nShortest path in a graph\n\n\n\n\nDijkstra - flood fill \n\n\nA* - use heuristic\n\n\n\n\nDynamic programming\n\n\n\n\nsolve small, constrained versions of problem\n\n\nsystematically relax constraints until solution\n\n\n\n\ne.g. Shortest path, minimum cost (by generating all pairs shortest paths)\n\n\nFloyd Warshall algorithm\n\n\n\n\nInclude weights of arcs in graph as a best short estimate; add 0 on the diagonal and infinity where there is no arc (adjacency matrix); smallest constrained version of problem.\n\n\nRelax the constraints. First allow path to include vertex v0. Check if traveling through v0 has a lower cost than the direct arc. Then allow path to include each node, one by one.\n\n\nUse another predecessor array to recreate paths.\n\n\n\n\nPython Design Patterns - \nSafari video\n\n\noverriding - different implementation of a method defined in a superclass\n\noverloading - method with the same name but different arguments\n\n\ninterface - defines just the methods\n\nabstract base class - may also define attributes\n\n\nCreational Patterns\n\nAbstract the task of creating of an object from the details of creating it.\n\n\n\n\nFactory - create objects from a family of related objects (know at runtime which type)\n\n\nBuilder - complex objects\n\n\nPrototype - objects with costly creation (clone instead of \n__init__\n)\n\n\nSingleton and Borg - only one instance or shared state\n\n\n\n\nStructural Patterns\n\n\n\n\nMVC - separation of concerns in UIs\n\n\nFacade - abstract complexities of subsystems\n\n\nProxy - control or alter access to a certain class\n\n\nDecorator - dynamic runtime composition\n\n\nAdapter - make two incompatible interfaces work together\n\n\n\n\nProblem Solving with Algorithms and Data Structures using Python\n\n\nStack, LIFO\n\n\n\n\nordering based on length of time in the collection\n\n\nremoval order is the reverse order of insertion\n\n\ncan be used to reverse order of items\n\n\n\n\nQueue, FIFO\n\n\nDeque\n\n\n\n\nitems are added and removed from either end\n\n\n\n\nConvert decimal numbers to binary\n\n\n\n\nDivide by 2 and keep track of the remainder, reverse remainders\n\n\nDivide by base (general)\n\n\n\n\nData Visualization Basics with Python\n\n\n\n\n\n\nClearly define the \nstory\n\n  What should the visualization communicate?\n\n\n\n\n\n\nPick the right chart\n\n   What charts tells the story more clearly without adding to much information?\n\n\n\n\n\n\nAssess your visualization\n\n  Can you immediately see the story?\n\n  Are there distractions?\n\n\n\n\n\n\nMinimal\n\n\n\n\nuse multiple colors only when color adds more information\n\n\ncolor schemes: qualitative, sequential, diverging \nhttp://colorbrewer2.org\n\n\ncolor blindness\n\n\nprint well B&W\n\n\n\n\n\n\n3D charts? Does it add more data? No!\n\n\nkeep it simple\n\n\nno chart junk\n\n\n\n\nTypes\n\n\n\n\nbar\n\n\nline chart\n\n\npie chart\n\n\nstacked areas (trends)\n\n\nhistogram\n\n\nscatter plots\n\n\n\n\nCDF cumulative distribution function\n\n\nWTF \nhttp://viz.wtf\n\n\nhttp://reddit.com/r/dataIsUgly\n\n\nResources\n\n\nDesign of Computer Programs by Peter Norvig - \nUdacity \n\n\nWeb Scraping with Python by Richard Lawson\n\n\nLearning Scrapy by Dimitrios Kouzis-Loukas\n\n\nIntermediate Django - \nSafari\n\n\nModular Programming with Python - \nSafari\n\nCode examples, architecture\n\n\nLearning Python Application Development - \nSafari\n\n\n\n\ndesign patterns (pythonic vs NonPythonic)\n\n\nstrategy\n\n\nsimple factory\n\n\nabstract factory\n\n\n\n\nEnterprise Software with Python\n\n\n\n\npythontesting.net\n\n\npythondoeswhat.blogspot.com\n\n\nPlanet Python\n\n\ninteractivepython.org\n\n\nPython Koans\n\n\n\n\nIntermediate Python Programming - Safari\n\n\nCode Dojo TDD - Pluralsight\n\n\nEffective Python - Safari\n\n\nTwo Scoops of Django: Best Practices for Django 1.8\n\n\nElasticsearch Essentials - Safari\n\n\nPython Machine Learning Projects - Safari\n\n\nPython Data Visualization Solutions - Safari\n\n\n\n\nImporting data (csv, fixed width, etc.)",
            "title": "Python"
        },
        {
            "location": "/#python",
            "text": "PyPI - the Python Package Index  The Hitchhiker\u2019s Guide to Python   Virtual environment  # virtualenvwrapper \nmkvirtualenv --python = ` which python3 `  EnvName\nworkon EnvName # Python's venv module \npython3 -m venv virtual_environment_name # -m module-name  cd  virtual_environment_name source  bin/activate   Python\u2019s default arguments are evaluated once when the function is defined, not each time the function is called.  def   append_to ( element ,   to = []): \n   to . append ( element ) \n   return   to  my_list   =   append_to ( 12 )  print   my_list  my_other_list   =   append_to ( 42 )  print   my_other_list  # [12]  # [12, 42]   A new list is created once when the function is defined, and the same list is used in each successive call.  What you should do instead:  def   append_to ( element ,   to = None ): \n     if   to   is   None : \n         to   =   [] \n     to . append ( element ) \n     return   to    Python\u2019s closures are late binding. This means that the values of variables used in closures are looked up at the time the inner function is called.   +  operator creates a new object  path   =   []  path   =   path   +   [ start ]     # creates a new list    If  send  has multiple recipients, it is better to define it explicitly:  send(message, recipients)   and call it with  send('Hello', ['God', 'Mom', 'Cthulhu'])  than  send(message, *args) . This way, the user of the function can manipulate the recipient list as a list beforehand, and it opens the possibility to pass any sequence, including iterators, that cannot be unpacked as other sequences.   If it's not unique to an instance, it doesn't belong to an instance variable.   Lambda's (make function) syntax is similar to def, but leaves out:   name of the function  parameters parenthesis  return keyword   def   fn ( a ,   b ,   c ): \n     return   a   +   b   +   c  lambda   a ,   b ,   c :   a   +   b   +   c    Floor division  x.__floordiv__(y)  x   //   y   Floor division and modulo  divmod ( x ,   y )    else  in loops  for : \n     ...  else :     # no break (loop not terminated by a break statement) \n     ...    Simultaneous state update   eliminates out of order update errors  allows high level thinking   x ,   y   =   y ,   x   +   y  x ,   y ,   dx ,   dy   =   ( x   +   dx   *   t , \n                 y   +   dy   *   t , \n                 ...   , \n                 ... )    Use decorators to factor out administrative logic  @cache  def   web_lookup ( url ): \n     return   urllib . urlopen ( url ) . read ()  def   foo (): \n     # do something  def   decorator ( func ): \n     # manipulate func \n     return   func  foo   =   decorator ( foo )    # Manually decorate  @decorator  def   bar (): \n     # Do something  # bar() is decorated    Context manager  from   contextlib   import   suppress  with   suppress ( FileNotFoundError ): \n     os . remove ( 'somefile.tmp' )    Raymond Hettinger -  Transforming Code into Beautiful, Idiomatic Python  import   functools  import   operator  functools . reduce ( operator . add ,   range ( 10 ))      # ((0 + 1) + 2) + 3 ...  sum ( range ( 10 ))  >>>   map ( str ,   range ( 10 ))  >>>   next ( _ )     # _ result of last invocation  map ( lambda   m :   m . name ,   sequence )  filter ( lambda   x : x   >   0 ,   [ 0 ,   - 1 ,   3 ,   4 ,   - 2 ])     # <filter at 0x7f...> [3, 4]    Named slices  name   =   slice ( 0 ,   10 )  lastname   =   slice ( 10 ,   20 )  line [ name ],   line [ lastname ]     Assertions are not for error handling (like checking arguments, we have exceptions for that)  Assert results of implementation logic are sane  assert result >= 0  Asserts should only fail if the code is wrong  Assertions can be turned off    random.choices  selects with replacement (puts it back in urn before next draw)  from   random   import   choices ,   sample  sample ([ 1 , 2 , 3 ],   k = 3 )      # [1, 2, 3]  choices ([ 1 , 2 , 3 ],   k = 3 )     # [1, 1, 1]    Do while construct  while   True : \n     stuff () \n     if   fail_condition : \n         break    sys.path  current search path (imports).   timeit  module  from   timeit   import   Timer  def   get_digits1 ( text ): \n     c   =   \"\" \n     for   i   in   text : \n         if   i . isdigit (): \n             c   +=   i \n     return   c  def   get_digits2 ( text ): \n     return   filter ( str . isdigit ,   text )  def   get_digits3 ( text ): \n     return   '' . join ( c   for   c   in   text   if   c . isdigit ())  if   __name__   ==   '__main__' : \n     count   =   5000000 \n     t   =   Timer ( \"get_digits1('abcdef123456789ghijklmnopq123456789')\" , \n               \"from __main__ import get_digits1\" ) \n     print   t . timeit ( number = count ) \n\n     t   =   Timer ( \"get_digits2('abcdef123456789ghijklmnopq123456789')\" , \n               \"from __main__ import get_digits2\" ) \n     print   t . timeit ( number = count ) \n\n     t   =   Timer ( \"get_digits3('abcdef123456789ghijklmnopq123456789')\" ,  \n               \"from __main__ import get_digits3\" ) \n     print   t . timeit ( number = count )  # 19.990989106  # Your original solution  # 16.7035926379 # Mine solution  # 24.8638381019 # Accepted solution",
            "title": "Python"
        },
        {
            "location": "/#debugging",
            "text": "python -i file.py  ipython -i file.py        # inspect interactively after running script  python -m pdb script.py         # post-mortem (on exceptions)  import pdb; pdb.pm()            # pdb post-mortem  import pdb; pdb.set_trace()     # manual breakpoint \n   help \n   continue    # next breakpoint \n   next        # next line, current context \n   step        # next, step into functions \n   list        # show context \n   up \n   return \n   bt  from IPython import embed; embed()  type()  callable('mystring'.__add__)  True.__class__  True.__class__.__bases__  bool.__mro__  inspect.getmro(type(True))  dir(5.0)  id(obj)  a is b  del a     # Remove a from the namespace  del       # keyword  locals()  python -m cProfile script.py  import cProfile  cProfile.run('test()')   Method Resolution Order or MRO  >>> pprint(LoggingOD.__mro__)\n(<class '__main__.LoggingOD'>,\n <class '__main__.LoggingDict'>,\n <class 'collections.OrderedDict'>,\n <class 'dict'>,\n <class 'object'>)\n\n>>> LoggingOD.__bases__\n(LoggingDict, OrderedDict)  super()  calls parents or ancestors of your children.  super()  means \"next in line\" (method resolution order).   children get called before their parents  parents stay in order   Python\u2019s super() considered super!  by Raymond Hettinger  Debugging pretty printing  print ( json . dumps ( obj ,   indent = 4 ,   sort_keys = True ))  any_list   =   [ 1 ,   2 ,   3 ]  dir ( any_list )  help ( any_list . reverse )   Place breakpoints in except clauses  try : \n   # code  except   ValueError : \n   import   pdb ;   pdb . set_trace ()  from   itertools   import   chain  flatten   =   chain . from_iterable  nested   =   [[ 1 , 2 ],   [ 3 , 4 ],   [ 4 , 5 ]]  flatten ( nested )     # 1, 2, 3, 4, 5  def   trace ( f ): \n     \"Print a trace of the input and output of a function on one line.\" \n     def   traced_f ( * args ): \n         result   =   f ( * args ) \n         print ( '{}({}) = {}' . format ( \n           f . __name__ ,  \n           ', ' . join ( map ( str ,   args )),   result ) \n         ) \n         return   result \n     return   traced_f",
            "title": "Debugging"
        },
        {
            "location": "/#logging",
            "text": "import   logging  # logging.basicConfig(level=logging.DEBUG)  # default WARNING  logging . debug ( 'debug message' )  logging . info ( 'info message' )  logging . warning ( 'warning message' )",
            "title": "Logging"
        },
        {
            "location": "/#testing",
            "text": "unittest       # standard lib \nunittest.mock\npytest\npytest --pdb   # Dropping to PDB (Python Debugger) on failures   Pycharm debug tests   Set breakpoints  Attach debugger in python console  Import and call pytest   import   pytest  pytest . main ( args = [ __file__ ])      Extract the functionality that doesn't need to talk to the database to a separate method and test it separately.",
            "title": "Testing"
        },
        {
            "location": "/#jupyter-notebook",
            "text": "!   ls -l       # shell commands  %   magic  %% time       # single run  %%   timeit     # multiple runs  %%   prun       # profiling",
            "title": "Jupyter Notebook"
        },
        {
            "location": "/#django",
            "text": "Model field arguments  null : If True, Django will store blank values as NULL in the database for fields where this is appropriate (a CharField will instead store an empty string). The default is False.  blank : If True, the field is allowed to be blank in your forms. The default is False, which means that Django's form validation will force you to enter a value. This is often used with null=True , because if you're going to allow blank values, you also want the database to be able to represent them appropriately.   {%   block   title   %} Login |  {{   block .super   }}{%   endblock   title   %}",
            "title": "Django"
        },
        {
            "location": "/#beyond-pep-8-by-raymond-hettinger",
            "text": "recognize non-pythonic APIs  don't get distracted by PEP 8, focus first on Pythonic versus NonPythonic  when needed write an adapter class  avoid unnecessary packaging in favor of simpler imports  create custom exceptions  use properties instead of getter methods  create a context manager for recurring set-up and teardown logic  use magic methods:  __len__ ,  __getitem__  add good  __repr__  for better debuggability def   __repr__ ( self ): \n     return   '{}({})' . format ( self . __class__ . __name__ ,   self . data )",
            "title": "Beyond PEP 8 by Raymond Hettinger"
        },
        {
            "location": "/#design-patterns-with-python-pluralsight",
            "text": "Interface - Abstract Base Class   Behavioral  Strategy Pattern  Observer Pattern",
            "title": "Design Patterns with Python - Pluralsight"
        },
        {
            "location": "/#unit-testing-with-python-pluralsight",
            "text": "Unit tests run in memory.  It's not unit test if it uses...   the file system  a database  the network   Regression - something that used to work, doesn't anymore.  Test Double - like 'Stunt Double'   Test Stub     (hard codded answer)  Fake Object   (real implementation, yet unsuitable for production)  Mock Object   (was method called?)  Test spy      (query afterwards what happened)  Dummy Object  (interface requires an argument, not used by the test)   Three kinds of Assert   Check the return value or an exception  Check a state change (public API)  Check a method call (mock or spy)   Monkey Patching",
            "title": "Unit TEsting with Python - Pluralsight"
        },
        {
            "location": "/#python-epiphanies-safari",
            "text": "A decorator changes or adds to the functionality of a function either by \nmodifying its arguments before the function is called, or changing its return \nvalue afterwards, or both.   Decorators   pass the body of the defined function to the decorator function  modify namespace, the name of the defined function points to the decorator function's return value",
            "title": "Python Epiphanies - Safari"
        },
        {
            "location": "/#designing-data-structures-in-python-george-t-heineman-safari",
            "text": "def   getMin ( self ): \n     if   self . root   is   None : \n         raise   ValueError ( 'Binary Tree is empty' ) \n     n   =   self . root \n     while   n . left : \n         n   =   n . left \n     return   n . value",
            "title": "Designing Data Structures in Python, George T. Heineman - Safari"
        },
        {
            "location": "/#python-beyond-the-basics-object-oriented-programming",
            "text": "Object attribute lookup hierarchy   instance  class  any class from which the class inherits",
            "title": "Python Beyond The Basics - Object Oriented Programming"
        },
        {
            "location": "/#python-data-structures-safari",
            "text": "if   'key'   not   in   dictionary : \n     dictionary [ 'key' ]   =   set ()  dictionary [ 'key' ] . add ( 'value' )  dictionary . setdefault ( 'key' ,   set ()) . add ( 'value' )  from   collections   import   defaultdict  set . remove ( item )  set . discard ( item )     # no KeyError  frozenset ()           # imutable",
            "title": "Python Data Structures - Safari"
        },
        {
            "location": "/#python-programming-language-david-beazley-safari",
            "text": "for   idx ,   item   in   enumerate ( items ,   start = 1 ): \n     pass  getattr ( obj ,   'name' )          # obj.name  setattr ( obj ,   'cost' ,   10 )      # obj.cost = 10  del   obj . name  obj . __dict__  obj . __class__ . __dict__  vars ( obj . __class__ )  @property  @price.setter  after ( 5 ,   lambda :   greeting ( 'Guido' ))  func . __name__",
            "title": "Python Programming Language, David Beazley - Safari"
        },
        {
            "location": "/#dive-into-python3",
            "text": "Separate code from data. \ne.g. Pluralization rules are data, they belong in a separate file.  Implement cache.",
            "title": "Dive into Python3"
        },
        {
            "location": "/#modern-python-by-raymond-hettinger",
            "text": "Lambda   make function  defer computation, make a promise \n  Run a computation at some point in the future f   =   lambda   :   x   **   y  f ()     zip *  means transpose  zip(*data)  defaultdict   use for grouping data (list, set)  accumulation  reverse one-to-many mapping   Expand wildcard  glob.glob('*.txt')  Wrap in csv reader  import   csv  with   open ( 'file.csv' )   as   f : \n     for   row   in   csv . reader ( f ): \n         print ( row )",
            "title": "Modern Python by Raymond Hettinger"
        },
        {
            "location": "/#python-programming-efficiently-lyndacom",
            "text": "itertools . chain ( iter1 ,   iter2 )     # concatenate  i1 ,   i2   =   itertools . tee ( iter ,   2 )   # duplicate  itertools . accumulate ( iter )        # running sum  itertools . product ( iter1 ,   iter2 )   # element-by-element product   Sets cannot have a mutable element, like list, set or dictionary, as its elements.   x and y  first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned.  x or y  first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned.  Note that neither  and  nor  or  restrict the value and type they return to False and True, but rather return the last evaluated argument.   Python Data Structures - Safari  Object attributes without underscores  any_dict   =   {}  [ attr   for   attr   in   dir ( any_dict )   if   '__'   not   in   attr ]",
            "title": "Python: Programming efficiently - Lynda.com"
        },
        {
            "location": "/#working-with-algorithms-in-python-by-george-heineman-safari",
            "text": "binary array search  binary search tree  balanced binary search tree  mergesort  exponentiation by squaring  peg solitaire  magic squares   Graph representation   adjacency matrix (dense edges)  adjacency list (sparse edges)   Shortest path in a graph   Dijkstra - flood fill   A* - use heuristic   Dynamic programming   solve small, constrained versions of problem  systematically relax constraints until solution   e.g. Shortest path, minimum cost (by generating all pairs shortest paths)  Floyd Warshall algorithm   Include weights of arcs in graph as a best short estimate; add 0 on the diagonal and infinity where there is no arc (adjacency matrix); smallest constrained version of problem.  Relax the constraints. First allow path to include vertex v0. Check if traveling through v0 has a lower cost than the direct arc. Then allow path to include each node, one by one.  Use another predecessor array to recreate paths.",
            "title": "Working with Algorithms in Python, by George Heineman - Safari"
        },
        {
            "location": "/#python-design-patterns-safari-video",
            "text": "overriding - different implementation of a method defined in a superclass \noverloading - method with the same name but different arguments  interface - defines just the methods \nabstract base class - may also define attributes  Creational Patterns \nAbstract the task of creating of an object from the details of creating it.   Factory - create objects from a family of related objects (know at runtime which type)  Builder - complex objects  Prototype - objects with costly creation (clone instead of  __init__ )  Singleton and Borg - only one instance or shared state   Structural Patterns   MVC - separation of concerns in UIs  Facade - abstract complexities of subsystems  Proxy - control or alter access to a certain class  Decorator - dynamic runtime composition  Adapter - make two incompatible interfaces work together",
            "title": "Python Design Patterns - Safari video"
        },
        {
            "location": "/#problem-solving-with-algorithms-and-data-structures-using-python",
            "text": "Stack, LIFO   ordering based on length of time in the collection  removal order is the reverse order of insertion  can be used to reverse order of items   Queue, FIFO  Deque   items are added and removed from either end   Convert decimal numbers to binary   Divide by 2 and keep track of the remainder, reverse remainders  Divide by base (general)",
            "title": "Problem Solving with Algorithms and Data Structures using Python"
        },
        {
            "location": "/#data-visualization-basics-with-python",
            "text": "Clearly define the  story \n  What should the visualization communicate?    Pick the right chart \n   What charts tells the story more clearly without adding to much information?    Assess your visualization \n  Can you immediately see the story? \n  Are there distractions?    Minimal   use multiple colors only when color adds more information  color schemes: qualitative, sequential, diverging  http://colorbrewer2.org  color blindness  print well B&W    3D charts? Does it add more data? No!  keep it simple  no chart junk   Types   bar  line chart  pie chart  stacked areas (trends)  histogram  scatter plots   CDF cumulative distribution function  WTF  http://viz.wtf  http://reddit.com/r/dataIsUgly",
            "title": "Data Visualization Basics with Python"
        },
        {
            "location": "/#resources",
            "text": "Design of Computer Programs by Peter Norvig -  Udacity   Web Scraping with Python by Richard Lawson  Learning Scrapy by Dimitrios Kouzis-Loukas  Intermediate Django -  Safari  Modular Programming with Python -  Safari \nCode examples, architecture  Learning Python Application Development -  Safari   design patterns (pythonic vs NonPythonic)  strategy  simple factory  abstract factory   Enterprise Software with Python   pythontesting.net  pythondoeswhat.blogspot.com  Planet Python  interactivepython.org  Python Koans   Intermediate Python Programming - Safari  Code Dojo TDD - Pluralsight  Effective Python - Safari  Two Scoops of Django: Best Practices for Django 1.8  Elasticsearch Essentials - Safari  Python Machine Learning Projects - Safari  Python Data Visualization Solutions - Safari   Importing data (csv, fixed width, etc.)",
            "title": "Resources"
        },
        {
            "location": "/git/",
            "text": "Git\n\n\nGit Reference\n \u2014 learn the most commonly used Git commands.\n\n\n\n\n\n\nRebasing is like saying, \u201cI want to base my changes on what everybody has already done.\u201d\n\n\n\n\nUndo all fetches from remote A simply by removing this remote:\n\n\ngit remote remove A\n\ngit remote add A <path/to/repository>\ngit fetch A <name of branch>\n\n\n\n\n\nDelete local branch\n\n\ngit branch -d feature/login\n\n\n\n\n\nDelete remote branch\n\n\ngit push origin --delete feature/login\n\n\n\n\n\nStash\n\n\ngit stash\n\n\n\n\n\nApply the stash and then immediately drop it from your stack.\n\n\ngit stash pop\n\n\n\n\n\nPush\n\n\ngit push origin master\n\n\n\n\n\nFetch Merge\n\n\ngit fetch origin branch\ngit merge --ff-only origin/deploy",
            "title": "Git"
        },
        {
            "location": "/git/#git",
            "text": "Git Reference  \u2014 learn the most commonly used Git commands.    Rebasing is like saying, \u201cI want to base my changes on what everybody has already done.\u201d   Undo all fetches from remote A simply by removing this remote:  git remote remove A\n\ngit remote add A <path/to/repository>\ngit fetch A <name of branch>  Delete local branch  git branch -d feature/login  Delete remote branch  git push origin --delete feature/login",
            "title": "Git"
        },
        {
            "location": "/git/#stash",
            "text": "git stash  Apply the stash and then immediately drop it from your stack.  git stash pop",
            "title": "Stash"
        },
        {
            "location": "/git/#push",
            "text": "git push origin master",
            "title": "Push"
        },
        {
            "location": "/git/#fetch-merge",
            "text": "git fetch origin branch\ngit merge --ff-only origin/deploy",
            "title": "Fetch Merge"
        },
        {
            "location": "/linux/",
            "text": "Linux\n\n\nExplain shell\n \u2014 help text for each command line argument.\n\n\n\n\nmkdir -p\n creates parent directories if necessary\n\n\nmkdir -p path/to/directory/{file1,file2,file3}\n\n\n\n\n\n\n\nCtrl+R      \n#reverse-i-search\n\ndate -u     \n#UTC data\n\n\ninfo \ncommand\n\n\ncommand\n --help\nxdg-open .\nxdg-open http://codebicycle.com\n\nnslookup -debug rogifts.com. \n8\n.8.8.8\ndig rogifts.com\ntraceroute -w \n2\n rogifts.com\n\ngrep --color\n=\nalways \n\"search string\"\n * \n|\n less -R\nless -M     \n# progress indicator\n\n/           \n# search in man pages (n next occurrence, p)\n\n\n\n\n\n\nProcess tree\n\n\npstree\n\n\n\n\n\nEquivalent?\n\n\necho $(which python)\necho `which python`\n\n\n\n\n\nGlobing (glob patterns)\n\n\nmv *.txt textfiles/\n\n\n\n\n\nAuto-complete filenames\n\n\nAlt + /\n\n\n\n\n\nShell expand\n\n\n$HOME Ctrl + Alt + E\n\n\n\n\n\nCommand substitution\n\n\n$(command)\ntouch file-$(date +%y-%m-%d)\n\n\n\n\n\nThis should tell us if any of the intermediate directories are blocking the \nwww-data\n user from opening the socket.\n\n\nsudo -u ww-data ls /var/opt/gitlab/gitlab-workhorse/socket\n\n\n\n\n\nBatch rename files\n\n\n# rename [ -v ] [ -n ] [ -f ] perlexpr [ files ]\n\n\n# test run\n\nrename -n \u2019s/\n\\.\nhtm$/\n\\.\nhtml/\u2019 *.htm\n\n# verbose rename\n\nrename -v \u2019s/\n\\.\nhtm$/\n\\.\nhtml/\u2019 *.htm",
            "title": "Linux"
        },
        {
            "location": "/linux/#linux",
            "text": "Explain shell  \u2014 help text for each command line argument.   mkdir -p  creates parent directories if necessary  mkdir -p path/to/directory/{file1,file2,file3}   Ctrl+R       #reverse-i-search \ndate -u      #UTC data \n\ninfo  command  command  --help\nxdg-open .\nxdg-open http://codebicycle.com\n\nnslookup -debug rogifts.com.  8 .8.8.8\ndig rogifts.com\ntraceroute -w  2  rogifts.com\n\ngrep --color = always  \"search string\"  *  |  less -R\nless -M      # progress indicator \n/            # search in man pages (n next occurrence, p)   Process tree  pstree  Equivalent?  echo $(which python)\necho `which python`  Globing (glob patterns)  mv *.txt textfiles/  Auto-complete filenames  Alt + /  Shell expand  $HOME Ctrl + Alt + E  Command substitution  $(command)\ntouch file-$(date +%y-%m-%d)  This should tell us if any of the intermediate directories are blocking the  www-data  user from opening the socket.  sudo -u ww-data ls /var/opt/gitlab/gitlab-workhorse/socket  Batch rename files  # rename [ -v ] [ -n ] [ -f ] perlexpr [ files ]  # test run \nrename -n \u2019s/ \\. htm$/ \\. html/\u2019 *.htm # verbose rename \nrename -v \u2019s/ \\. htm$/ \\. html/\u2019 *.htm",
            "title": "Linux"
        },
        {
            "location": "/notes/",
            "text": "Notes\n\n\nRead logs\n\n\ntail -f log/development.log\n\nless log/development.log\n\n# Shift+F will take you to the end of the file, and continuously display new\n\n\n# contents. In other words, it behaves just like tail -f.\n\n\nless +F log/development.log\n\n\n# to display colors\n\nless -R file.log\n\n\n\n\n\n\n\nInstall gems without sudo\n\n\nrbenv \nlocal\n <version>\n\n\n\n\n\n\n\nPostgres\n\n\nWhat's the default superuser username/password for postgres?\n\n\nsudo -u postgres psql postgres\n\nsudo -u postgres createuser -D -A -P myuser\nsudo -u postgres createdb -O myuser mydb\n\npsql myuser -h \n127\n.0.0.1 -d db_name\n\n\n\n\n\n\n\nElements outline (dev tools)\n\n\n*\n \n{\n\n    \noutline\n:\n \n1\npx\n \nsolid\n \ngreen\n;\n\n\n}\n\n\n\n\n\n\n\n\nHTTP servers (e.g. testing static sites on mobile devices)\n\n\n# install (requires nodejs/npm)\n\nnpm install http-server -g\n\n#run\n\nhttp-server -p \n8000\n --cors\n\n\n\n\n\n# Python\n\npython -m http.server\n\n# localhost http://127.0.0.1:8000/\n\n\n\n\n\n\n\n\nCinnamon restart \nCtrl+Alt+Esc\n (useful when reseting key bindings).\n\n\n\n\nClear terminal \nCtrl+L\n\n\n\n\nRecode, in place, all \n.srt\n files in current folder, from Central European (1250) to UTF-8 encoding.\n\n\nrecode cp1250.. ./*.srt\n\n\n\n\n\n\n\nOmxplayer specify subtitle\n\n\nomxplayer -o hdmi -r file-name.avi --subtitles file-name.srt\n\n\n\n\n\n\n\nDownload website\n\n\nwget -m -k -nH <http://site.url/>\n\n\n\n\n\n\n\nTurn off screen using command line\n\n\nxset dpms force off\n\n\n\n\n\n\n\nJekyll post's update date\n\n\nUpdate post's modification date in the front matter with a git pre-commit hook.\n\n\n\n\n\n\nCreate \npre-commit\n file in \n.git/hooks/\n with the following content\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n#! /bin/sh\n\n\n# Contents of .git/hooks/pre-commit\n\n\ngit diff --cached --name-status \n|\n grep \n\"^M\"\n \n|\n \nwhile\n \nread\n a b\n;\n \ndo\n\n  cat \n$b\n \n|\n sed \n\"/---.*/,/---.*/s/^update:.*\n$\n/update: \n$(\ndate -u \n\"+%Y-%m-%d\"\n)\n/\"\n > tmp\n  mv tmp \n$b\n\n  git add \n$b\n\n\ndone\n\n\n\n\n\n\n\n\n\n\n\nAdd an \nupdate:\n field to post's front matter\n\n\n---\n\n\ntitle\n:\n \nPost Title\n\n\nupdate\n:\n\n\n---\n\n\n\n\n\n\n\n\n\n\nOn git commit the \nupdate:\n field will update\n\n\n\n\n\n\n\n\nSublime Text\n\n\nCtrl+R\n goto symbol.\n\nWith MarkdownEditing package navigate headings.\n\n\nF6\n toggle spell checking on/off.\n\n\n\n\nRun multiple Firefox versions\n\n\n\n\ndownload desired firefox version \n\n\nextract archive and \ncd\n into the firefox directory\n\n\n\n\ncd\n firefox-52.4.0esr/firefox\n\nHOME\n=\n`\npwd\n`\n ./firefox --no-remote\n\n\n\n\n\n\n\nNaming\n\n\nis_empty\n        \n# boolean\n\n\nis_postable()\n   \n# return boolean\n\n\npost_payment()\n\n\n\n\n\n\nName things based on what they are and not what they look like (css classes).\n\n\nJavascript example:\n\n\nfetchFromServer\n(\n\"getSomeTweets\"\n,\n \ndisplayTweets\n);\n\n\nfunction\n \ndisplayTweets\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\ndata\n.\ntweets\n);\n\n\n}\n\n\n\n\n\n\n\n\nMachine Learning\n\n\n\n\nclassifiers\n\n\nsupport vector machines\n\n\n\n\n\n\nneural networks (nets)\n\n\ndeep learning\n\n\n\n\n\n\nreinforcement learning\n\n\n\n\n\n\nREST\n\n\n\n\nClient asks for a resource and gets a representation of that resource.\n\n\n\n\nURI\n\n\n\n\nEvery URL is a URI, but not every URI is a URL. ISBN numbers for instance are URI's but not URLS ;)\n\n\n\n\n\n\nDynamic Programming, recursion + memoization + guessing\n\n\n\n\nInvariants are truths about objects of that class that should endure for the lifetime of the object.\n\n\n\n\nThe MVC pattern allows the following interactions:\n\n\n\n\nA model can change its data depending upon inputs received from the controller.\n\n\nThe changed data is reflected on the views, which are subscribed to changes in the model.\n\n\nControllers can send commands to update the model's state, such as when making changes to a document. Controllers can also send commands to modify the presentation of a view without any change to the model, such as zooming in on a graph or chart.\n\n\nThe MVC pattern implicitly includes a change propagation mechanism to notify each component of changes on the other dependent components.\n\n\nA number of web applications in the Python world implement MVC or a variation of it. We will look at a couple of them, namely Django and Flask, in the coming sections.\n\n\n\n\n\n\nAnalysis\n\nWhat needs to be done. Output is a set of requirements.\n\nVisitors of the website need to be able to:\n\n\n\n\napply for jobs\n\n\nbrowse, order products\n\n\n\n\nDesign\n\nHow things should be done. Output is an implementation specification.\n\nConvert requirements into an implementation specification. (set of classes and interfaces)\n\n\n\n\nname the objects\n\n\ndefine the behaviors\n\n\n\n\n\n\nPolymorphism\n\n\n\n\nmultiple forms\n\n\nallows objects with different internal structures to have a common interface\n\n\n\n\n\n\nAlgorithms Coursera\n\n\nPut pseudo-code into programs to understand algorithms better.\n\n\nTeddy bear programming \u2014 explain the problem to somebody, put it in words.\n\n\nDo one thing\n\nThis implies that the blocks within if statements, else statements, while statements, and so on should be one line long. Probably that line should be a function call.\n\n\nBook: \"Mathematics for Computer Science\" by Eric Lehman\n\n\n\n\nProbability\n\n\nP(A and B) = P(A) * P(B)\nP(A or B) = P(A) + P(B) - P(A and B)\n\n\n\n\n\nIndependent events\n\nProbability of getting heads on two coin flips\n\n\nP(HH) = P(H) * P(H) = 1/2 * 1/2 = 1/4\n\n\n\n\n\nGamblers fallacy: after getting n heads in a row the probability of getting another heads is still 1/2 (is not affected by the previous independent draws).\n\n\nProbability of getting tails on the first flip, heads on the second and tails on the third\n\n\nP(THT) = P(T) * P(H) * P(T) = 1/2 * 1/2 * 1/2 = 1/8\n\n\n\n\n\n\n\nCircle\n\n\nCircumference: C = 2\u03c0r\n\nArea: A = \u03c0r^2\n\n\n\n\nElectricity\n\n\nElectricity is the movement of electrons.\n\nElectrons create charge.\n\n\nVoltage is the difference in charge between two points.\n\nCurrent is the rate at which charge is flowing (flow of charge).\n\nResistance is a material's tendency to resist the flow of charge (current).\n\n\nJavascript and Jquery\n\n\nThe scope of Javascript functions is defined at the time the function is created.\n\nThe scope is determined at the time the function is created, but the values of the variables in the scope are only retrieved at the time the function is called.\n\n\nthis\n is a reference to the object that the function is created inside.\n\n\ngetElementBy\n returns a live nodelist.\n\n\nquerySelector\n returns a static nodelist.\n\n\nDocker\n\n\nA Docker image is the output of a docker build. The build process runs each of the instructions within a Dockerfile.\n\n\ndocker build\n\ndocker run <image>\n  -it interactive terminal\n  -d detached\n  -p port\ndocker stop\ndocker start\n\ndocker exec -it   # interact with containers running in the background\n\n\n\n\n\n\n\nmount x11 socket\n\n\nexport display\n\n\nvolume\n\n\n\n\nJessica Frazelle \nhttps://blog.jessfraz.com/\n\n\nGoogle Clean Code Talks by Mi\u0161ko Hevery\n\n\nNever return a null, instead return a Null Object, e.g. an empty list.\n\n\nDon't mix instantiation with business logic, use factories, builders.\n\n\n\n\nDo as little work in constructors as possible.\n\n  Ideally only assignments in constructors.\n\n\n\n\nLaw of Demeter\n\nAsking for something you don't need directly only to get to what you really want.\n\n\n\n\nOnly ask for objects you directly need (operate on).  \n\n\nYou are not supposed to know about things you don't directly need.  \n\n\nDependency injection, parent object does not make a child, it asks for child. So if child needs a new dependency the parent is not aware.\n\ne.g. House is not responsible for construction. If it needs a door it asks for one. The HouseFactory is responsible for construction. \nvideo\n\n\n\n\nFour biggest untestables\n\n\n\n\nLocation of new operators\n\n\nWork in constructors\n\n\nGlobal State (Singletons)\n\n\nLaw of Demeter violations\n\n\n\n\nSandi Metz\n\n\n\n\nNovice programmers don\u2019t yet have the skills to write simple code.\n\n\n\n\nThe message-based perspective yields more flexible applications than does the class-based perspective. Changing the fundamental design question from \u201cI know I need this class, what should it do?\u201d to \u201cI need to send this message, who should respond to it?\u201d is the first step in that direction.\n\n\nYou don\u2019t send messages because you have objects, you have objects because you send messages.\n\n\nWhat vs how\n\nAsk for 'what' you want instead of telling 'how' to do it.\n\n\nClass is just one way for an object to acquire a public interface; the public interface an object obtains by way of its class may be one of several that it contains.\n\nIt\u2019s not what an object is that matters (class), it\u2019s what it does (interface).\n\n\nGood design preserves maximum flexibility at minimum cost by putting off decisions at every opportunity, deferring commitments until more specific requirements arrive.\n\n\nThe true purpose of testing, just like the true purpose of design, is to reduce costs.\n\n\nIncoming messages should be tested for the state they return. Outgoing command messages should be tested to ensure they get sent. Outgoing query messages should not be tested.\n\n\nInjecting Dependencies as Roles\n\n\n\n\nInheritance is for specialization not for sharing code.\n\nInject an object to play the role of the thing that varies.\n\n\n\n\nNull Object pattern\n\n\n\n\nBy returning a null object (i.e. an empty list) there is no need to verify that the return value is in fact a list. The calling function may simply iterate the list as normal, effectively doing nothing. It is, however, still possible to check whether the return value is a null object (e.g. an empty list) and react differently if desired.\n\n\n\n\nCode smells are surface symptoms of deeper problems in the code.\n\n\n\n\nGod object\n\n\n\n\nfeature envy\n\n\n\n\n\n\nlong method\n\n\n\n\nparameter creep\n\n\ncyclomatic complexity (too many branches or loops, convoluted logic difficult to follow)\n\n\noverly long or short identifiers\n\n\n\n\nRefactoring\n\n\n\n\nfix complex code first\n\n\nfix code smells\n\n\nfix low-hanging fruits (code style, conventions)\n\n\n\n\nMeta\n\n\n\n\nFind people that make me want to be better or smarter\n\n\nPeople that work hard, high integrity and low ego (how to stat a startup)\n\n\n\n\n\n\nLearn to work with other people in an programming environment (almost everything interesting built today is built in groups).\n\n\nImportant skill to learn: How to explain something to somebody else.\n\n\nCourse staff is there to help you learn, use them to learn more quickly and more efficiently.\n\n\nBuild good habits now (discuss, don't copy).\n\n\n\n\nCS61A Spring 2015, The Structure and Interpretation of Computer Programs, John S. Denero  \n\n\n\n\nKeep a dozen of your favorite problems present in your mind - Richard Feynman\n\n\nGet to the point. What do I get from learning the material? Compact lessons, broken up in bite-sized pieces.\n\n\n\n\nDesign is redesign  \n\n\n\n\nOne of the least effective ways to design software architecture is to ignore the software systems that came before us.\n\n\nA month of coding can save an hour of architecting\n\n\n\n\nResources\n\n\nObject-Oriented JavaScript by Marcus Phillips - \nUdacity\n, \nYouTube\n\n\nJavascript Design Patterns - \nUdacity\n\n\nParenting101x The Science of Parenting - \nEdx\n \n\n\nJavaScript Domain-Driven Design - Safari",
            "title": "Notes"
        },
        {
            "location": "/notes/#notes",
            "text": "Read logs  tail -f log/development.log\n\nless log/development.log # Shift+F will take you to the end of the file, and continuously display new  # contents. In other words, it behaves just like tail -f. \n\nless +F log/development.log # to display colors \nless -R file.log   Install gems without sudo  rbenv  local  <version>   Postgres  What's the default superuser username/password for postgres?  sudo -u postgres psql postgres\n\nsudo -u postgres createuser -D -A -P myuser\nsudo -u postgres createdb -O myuser mydb\n\npsql myuser -h  127 .0.0.1 -d db_name   Elements outline (dev tools)  *   { \n     outline :   1 px   solid   green ;  }    HTTP servers (e.g. testing static sites on mobile devices)  # install (requires nodejs/npm) \nnpm install http-server -g #run \nhttp-server -p  8000  --cors  # Python \npython -m http.server # localhost http://127.0.0.1:8000/    Cinnamon restart  Ctrl+Alt+Esc  (useful when reseting key bindings).   Clear terminal  Ctrl+L   Recode, in place, all  .srt  files in current folder, from Central European (1250) to UTF-8 encoding.  recode cp1250.. ./*.srt   Omxplayer specify subtitle  omxplayer -o hdmi -r file-name.avi --subtitles file-name.srt   Download website  wget -m -k -nH <http://site.url/>   Turn off screen using command line  xset dpms force off   Jekyll post's update date  Update post's modification date in the front matter with a git pre-commit hook.    Create  pre-commit  file in  .git/hooks/  with the following content  1\n2\n3\n4\n5\n6\n7\n8 #! /bin/sh  # Contents of .git/hooks/pre-commit \n\ngit diff --cached --name-status  |  grep  \"^M\"   |   while   read  a b ;   do \n  cat  $b   |  sed  \"/---.*/,/---.*/s/^update:.* $ /update:  $( date -u  \"+%Y-%m-%d\" ) /\"  > tmp\n  mv tmp  $b \n  git add  $b  done      Add an  update:  field to post's front matter  ---  title :   Post Title  update :  ---     On git commit the  update:  field will update     Sublime Text  Ctrl+R  goto symbol. \nWith MarkdownEditing package navigate headings.  F6  toggle spell checking on/off.   Run multiple Firefox versions   download desired firefox version   extract archive and  cd  into the firefox directory   cd  firefox-52.4.0esr/firefox HOME = ` pwd `  ./firefox --no-remote   Naming  is_empty          # boolean  is_postable()     # return boolean  post_payment()   Name things based on what they are and not what they look like (css classes).  Javascript example:  fetchFromServer ( \"getSomeTweets\" ,   displayTweets );  function   displayTweets ( err ,   data )   { \n   console . log ( data . tweets );  }    Machine Learning   classifiers  support vector machines    neural networks (nets)  deep learning    reinforcement learning    REST   Client asks for a resource and gets a representation of that resource.   URI   Every URL is a URI, but not every URI is a URL. ISBN numbers for instance are URI's but not URLS ;)    Dynamic Programming, recursion + memoization + guessing   Invariants are truths about objects of that class that should endure for the lifetime of the object.   The MVC pattern allows the following interactions:   A model can change its data depending upon inputs received from the controller.  The changed data is reflected on the views, which are subscribed to changes in the model.  Controllers can send commands to update the model's state, such as when making changes to a document. Controllers can also send commands to modify the presentation of a view without any change to the model, such as zooming in on a graph or chart.  The MVC pattern implicitly includes a change propagation mechanism to notify each component of changes on the other dependent components.  A number of web applications in the Python world implement MVC or a variation of it. We will look at a couple of them, namely Django and Flask, in the coming sections.    Analysis \nWhat needs to be done. Output is a set of requirements. \nVisitors of the website need to be able to:   apply for jobs  browse, order products   Design \nHow things should be done. Output is an implementation specification. \nConvert requirements into an implementation specification. (set of classes and interfaces)   name the objects  define the behaviors    Polymorphism   multiple forms  allows objects with different internal structures to have a common interface    Algorithms Coursera  Put pseudo-code into programs to understand algorithms better.  Teddy bear programming \u2014 explain the problem to somebody, put it in words.  Do one thing \nThis implies that the blocks within if statements, else statements, while statements, and so on should be one line long. Probably that line should be a function call.  Book: \"Mathematics for Computer Science\" by Eric Lehman   Probability  P(A and B) = P(A) * P(B)\nP(A or B) = P(A) + P(B) - P(A and B)  Independent events \nProbability of getting heads on two coin flips  P(HH) = P(H) * P(H) = 1/2 * 1/2 = 1/4  Gamblers fallacy: after getting n heads in a row the probability of getting another heads is still 1/2 (is not affected by the previous independent draws).  Probability of getting tails on the first flip, heads on the second and tails on the third  P(THT) = P(T) * P(H) * P(T) = 1/2 * 1/2 * 1/2 = 1/8   Circle  Circumference: C = 2\u03c0r \nArea: A = \u03c0r^2   Electricity  Electricity is the movement of electrons. \nElectrons create charge.  Voltage is the difference in charge between two points. \nCurrent is the rate at which charge is flowing (flow of charge). \nResistance is a material's tendency to resist the flow of charge (current).",
            "title": "Notes"
        },
        {
            "location": "/notes/#javascript-and-jquery",
            "text": "The scope of Javascript functions is defined at the time the function is created. \nThe scope is determined at the time the function is created, but the values of the variables in the scope are only retrieved at the time the function is called.  this  is a reference to the object that the function is created inside.  getElementBy  returns a live nodelist.  querySelector  returns a static nodelist.",
            "title": "Javascript and Jquery"
        },
        {
            "location": "/notes/#docker",
            "text": "A Docker image is the output of a docker build. The build process runs each of the instructions within a Dockerfile.  docker build\n\ndocker run <image>\n  -it interactive terminal\n  -d detached\n  -p port\ndocker stop\ndocker start\n\ndocker exec -it   # interact with containers running in the background   mount x11 socket  export display  volume   Jessica Frazelle  https://blog.jessfraz.com/",
            "title": "Docker"
        },
        {
            "location": "/notes/#google-clean-code-talks-by-misko-hevery",
            "text": "Never return a null, instead return a Null Object, e.g. an empty list.  Don't mix instantiation with business logic, use factories, builders.   Do as little work in constructors as possible. \n  Ideally only assignments in constructors.   Law of Demeter \nAsking for something you don't need directly only to get to what you really want.   Only ask for objects you directly need (operate on).    You are not supposed to know about things you don't directly need.    Dependency injection, parent object does not make a child, it asks for child. So if child needs a new dependency the parent is not aware. \ne.g. House is not responsible for construction. If it needs a door it asks for one. The HouseFactory is responsible for construction.  video   Four biggest untestables   Location of new operators  Work in constructors  Global State (Singletons)  Law of Demeter violations",
            "title": "Google Clean Code Talks by Mi\u0161ko Hevery"
        },
        {
            "location": "/notes/#sandi-metz",
            "text": "Novice programmers don\u2019t yet have the skills to write simple code.   The message-based perspective yields more flexible applications than does the class-based perspective. Changing the fundamental design question from \u201cI know I need this class, what should it do?\u201d to \u201cI need to send this message, who should respond to it?\u201d is the first step in that direction.  You don\u2019t send messages because you have objects, you have objects because you send messages.  What vs how \nAsk for 'what' you want instead of telling 'how' to do it.  Class is just one way for an object to acquire a public interface; the public interface an object obtains by way of its class may be one of several that it contains. \nIt\u2019s not what an object is that matters (class), it\u2019s what it does (interface).  Good design preserves maximum flexibility at minimum cost by putting off decisions at every opportunity, deferring commitments until more specific requirements arrive.  The true purpose of testing, just like the true purpose of design, is to reduce costs.  Incoming messages should be tested for the state they return. Outgoing command messages should be tested to ensure they get sent. Outgoing query messages should not be tested.  Injecting Dependencies as Roles   Inheritance is for specialization not for sharing code. \nInject an object to play the role of the thing that varies.   Null Object pattern   By returning a null object (i.e. an empty list) there is no need to verify that the return value is in fact a list. The calling function may simply iterate the list as normal, effectively doing nothing. It is, however, still possible to check whether the return value is a null object (e.g. an empty list) and react differently if desired.   Code smells are surface symptoms of deeper problems in the code.   God object   feature envy    long method   parameter creep  cyclomatic complexity (too many branches or loops, convoluted logic difficult to follow)  overly long or short identifiers   Refactoring   fix complex code first  fix code smells  fix low-hanging fruits (code style, conventions)",
            "title": "Sandi Metz"
        },
        {
            "location": "/notes/#meta",
            "text": "Find people that make me want to be better or smarter  People that work hard, high integrity and low ego (how to stat a startup)    Learn to work with other people in an programming environment (almost everything interesting built today is built in groups).  Important skill to learn: How to explain something to somebody else.  Course staff is there to help you learn, use them to learn more quickly and more efficiently.  Build good habits now (discuss, don't copy).   CS61A Spring 2015, The Structure and Interpretation of Computer Programs, John S. Denero     Keep a dozen of your favorite problems present in your mind - Richard Feynman  Get to the point. What do I get from learning the material? Compact lessons, broken up in bite-sized pieces.   Design is redesign     One of the least effective ways to design software architecture is to ignore the software systems that came before us.  A month of coding can save an hour of architecting",
            "title": "Meta"
        },
        {
            "location": "/notes/#resources",
            "text": "Object-Oriented JavaScript by Marcus Phillips -  Udacity ,  YouTube  Javascript Design Patterns -  Udacity  Parenting101x The Science of Parenting -  Edx    JavaScript Domain-Driven Design - Safari",
            "title": "Resources"
        },
        {
            "location": "/solid/",
            "text": "SOLID\n\n\nSOLID Principles\n\n\nSingle Responsibility Principle \u2014 Classes should have only one reason to change\n\n\nOpen Closed Principle \u2014 Open for extension, closed for modification\n\n\nLiskov's Substitution Principle \u2014 Base types should be replaceable by subtypes\n\n\nInterface Segregation \u2014 Better to have many smaller interfaces than a big one\n\n\nDependency Inversion \u2014 Depend upon abstractions not concretions\n\n\nSingle Responsibility Principle\n\n\n\n\nonly one reason to change\n\n\nsmall class\n\n\nseparation of concerns\n\n\ndo one thing, and do it well\n\n\nhigh cohesion, low coupling\n\n\n\n\ne.g. It is not the responsibility of User to know how a booking is made. User should not change when booking logic changes.\n\n\nOpen, Closed\n\n\n\n\nopen for extension, closed for modification\n\n\nexisting code shouldn't be modified when adding new features\n\n\nabstractions, interfaces\n\n\n\n\ne.g. Don't add another \nelif\n clause that checks a type, instead add another class that does exactly what you need.\n\n\nLiskov's Substitution\n\n\nObjects of type may be replaced with objects of a subtype without altering the correctness of the program.\n\n\nInterface Segregation\n\n\nBetter to have many smaller interfaces than a big one.\n\nDon't force classes to implement methods that don't concern them.\n\n\ne.g. You don't need card details when making a cash payment.\n\n\nDependency Inversion\n\n\nDepend on an interface not on a concrete class.\n\n\ne.g. The base class should depend on a interface (have a interface as a member instead of a concrete class). The consuming class should receive the correct object that implements the interface. Don't do type checking.\n\n\nSOLID principles \npart 1\n, \npart 2\n on YouTube.\n\n\nEncapsulation and SOLID - Pluralsight\n\n\nCommand-query separation\n\n\n\n\nqueries return data \n\n\ndo not mutate state\n\n\nidempotent\n\n\nsafe to invoke\n\n\n\n\n\n\ncommands have side effects \n\n\nok to invoke queries from commands\n\n\n\n\n\n\n\n\nPostel's law (Robustness principle)\n\n\n\n\nBe conservative in what you send (guarantees about output, contract)\n\n\nBe liberal in what you accept (tolerant of inputs)\n\n\nFail fast\n\n\n\n\n\n\n\n\nAbstraction is the process of hiding complexity: separate what you want from how you do it.\n\ne.g. function call vs function body; the function hides the complexity of how the task is performed.\n\n\nEncapsulation\n\nHide the representation of data, and provide functions for setting, retrieving and manipulating data.\n\n\n\n\nHide the details of how information is stored.\n\n   Separate what you are storing from how it is stored\n\n\nDo something extra when a value is set e.g. update a counter, save in database, error-checking.",
            "title": "SOLID"
        },
        {
            "location": "/solid/#solid",
            "text": "",
            "title": "SOLID"
        },
        {
            "location": "/solid/#solid-principles",
            "text": "Single Responsibility Principle \u2014 Classes should have only one reason to change  Open Closed Principle \u2014 Open for extension, closed for modification  Liskov's Substitution Principle \u2014 Base types should be replaceable by subtypes  Interface Segregation \u2014 Better to have many smaller interfaces than a big one  Dependency Inversion \u2014 Depend upon abstractions not concretions",
            "title": "SOLID Principles"
        },
        {
            "location": "/solid/#single-responsibility-principle",
            "text": "only one reason to change  small class  separation of concerns  do one thing, and do it well  high cohesion, low coupling   e.g. It is not the responsibility of User to know how a booking is made. User should not change when booking logic changes.",
            "title": "Single Responsibility Principle"
        },
        {
            "location": "/solid/#open-closed",
            "text": "open for extension, closed for modification  existing code shouldn't be modified when adding new features  abstractions, interfaces   e.g. Don't add another  elif  clause that checks a type, instead add another class that does exactly what you need.",
            "title": "Open, Closed"
        },
        {
            "location": "/solid/#liskovs-substitution",
            "text": "Objects of type may be replaced with objects of a subtype without altering the correctness of the program.",
            "title": "Liskov's Substitution"
        },
        {
            "location": "/solid/#interface-segregation",
            "text": "Better to have many smaller interfaces than a big one. \nDon't force classes to implement methods that don't concern them.  e.g. You don't need card details when making a cash payment.",
            "title": "Interface Segregation"
        },
        {
            "location": "/solid/#dependency-inversion",
            "text": "Depend on an interface not on a concrete class.  e.g. The base class should depend on a interface (have a interface as a member instead of a concrete class). The consuming class should receive the correct object that implements the interface. Don't do type checking.  SOLID principles  part 1 ,  part 2  on YouTube.",
            "title": "Dependency Inversion"
        },
        {
            "location": "/solid/#encapsulation-and-solid-pluralsight",
            "text": "Command-query separation   queries return data   do not mutate state  idempotent  safe to invoke    commands have side effects   ok to invoke queries from commands     Postel's law (Robustness principle)   Be conservative in what you send (guarantees about output, contract)  Be liberal in what you accept (tolerant of inputs)  Fail fast     Abstraction is the process of hiding complexity: separate what you want from how you do it. \ne.g. function call vs function body; the function hides the complexity of how the task is performed.  Encapsulation \nHide the representation of data, and provide functions for setting, retrieving and manipulating data.   Hide the details of how information is stored. \n   Separate what you are storing from how it is stored  Do something extra when a value is set e.g. update a counter, save in database, error-checking.",
            "title": "Encapsulation and SOLID - Pluralsight"
        },
        {
            "location": "/archive/session-fixation/",
            "text": "Session Fixation\n\n\nSession fixation and session hijacking are both attempts to gain access to a system as another user.\n\n\n\n\ncauses a victim to use a session id chosen by an attacker\n\n\n\n\nProtection\n\n\nDelete the old session id and create a new session id, when authenticating a user.\n\n\n\n\nA sells a car to B\n\n\nA doesn't give all of the keys to B and keeps one\n\n\nIf B doesn't change the lock, A could still use it.\n\n\n\n\nIf the session id remains the same before and after log-in, it is vulnerable.\n\n\n\n\nspecific to session implementations that use a session Id.\n\n  Flask by default doesn't use a session Id.\n\n\n\n\nProcess\n\n\nAttacker A gives a session id to B\n\nAfter B authenticates, the server does not update the session id value\n\nA can use the session id to log in to B's account.\n\n\nExample\n\n\nAmazon\n\n\nWhen someone goes to Amazon they can add products in cart without logging in.\n\nWhen they decide to log in, Amazon links the unauthenticated session data with the authenticated user\n\n\nIf Amazon did not create a new session id on authentication:\n\n\n\n\nan attacker might go to Amazon first\n\n\nget an unauthenticated session id\n\n\nfixate that session id in the victim browser and wait for it to log in\n\n\nafter the victim logs in, with the attacker fixated session, the attacker refreshes their browser and they will be authenticated as the victim.\n\n\n\n\nSources\n\n\nHanqing Wu, Liz Zhao. (2015). Web Security, Auerbach Publications\n\n\nSession Fixation Demystified\n (2014)",
            "title": "Session Fixation"
        },
        {
            "location": "/archive/session-fixation/#session-fixation",
            "text": "Session fixation and session hijacking are both attempts to gain access to a system as another user.   causes a victim to use a session id chosen by an attacker",
            "title": "Session Fixation"
        },
        {
            "location": "/archive/session-fixation/#protection",
            "text": "Delete the old session id and create a new session id, when authenticating a user.   A sells a car to B  A doesn't give all of the keys to B and keeps one  If B doesn't change the lock, A could still use it.   If the session id remains the same before and after log-in, it is vulnerable.   specific to session implementations that use a session Id. \n  Flask by default doesn't use a session Id.",
            "title": "Protection"
        },
        {
            "location": "/archive/session-fixation/#process",
            "text": "Attacker A gives a session id to B \nAfter B authenticates, the server does not update the session id value \nA can use the session id to log in to B's account.",
            "title": "Process"
        },
        {
            "location": "/archive/session-fixation/#example",
            "text": "Amazon  When someone goes to Amazon they can add products in cart without logging in. \nWhen they decide to log in, Amazon links the unauthenticated session data with the authenticated user  If Amazon did not create a new session id on authentication:   an attacker might go to Amazon first  get an unauthenticated session id  fixate that session id in the victim browser and wait for it to log in  after the victim logs in, with the attacker fixated session, the attacker refreshes their browser and they will be authenticated as the victim.",
            "title": "Example"
        },
        {
            "location": "/archive/session-fixation/#sources",
            "text": "Hanqing Wu, Liz Zhao. (2015). Web Security, Auerbach Publications  Session Fixation Demystified  (2014)",
            "title": "Sources"
        },
        {
            "location": "/archive/ext4-file-permissions/",
            "text": "EXT4 File Permissions\n\n\n\n\nIs there a religious or philosophical reason why you didn't format the data partition in NTFS?\n\n\n\n\nHere's the problem. Let's say you change ownership of the mounted partition to \"bart\" on Ubuntu: sudo chown bart /media/Data. Now bart can add a file to the data partition.\n\n\nNow you reboot into Fedora and let's say your username in Fedora is also bart. The problem is \"bart\" in Fedora is not the same as \"bart\" in Ubuntu because their uid's are different. Bart in Ubuntu has a uid = 1000 whereas bart in Fedora is 500 ( I think - it's been a while ) and bart in Suse may be something else.\n\n\nYou could leave the ownership as root but change permissions to 777: sudo chmod 0777 /media/Data. Then everyone in every OS can add to the partition.\n\n\nBut there's a bigger problem ahead. When bart on ubuntu saves a file to the data partition it will save as owner:group = bart:bart and with permissions of 644. bart can read and write to the file in ubuntu but everyone else in ubuntu can only read. Since bart on Fedora has a different uid he can read the file but cannot edit the file.\n\n\nYou've got some options at this point. You could change the uid's of bart in every system to the same value so that bart = bart. You could change the umask in bashrc in every OS to 000 instead of 022 so that every file saved saves with permissions of 666 - which is the sign of the devil and is frowned upon. There are more complex solutions as well.\n\n\nOr you could format the partition as NTFS. Then every OS will mount the partition thinking they own it - sort of like a usb stick - only internal.\n\n\n\n\nIt's not really an extra step as such, it's just that Ext filesystems support Linux file/directory ownerships and permissions, and therefore their ownership can be handled just like any other file or directory on your system.\n\n\n\n\nIt's the NTFS partition that needs the extra step of configuring the permissions at mount time for the whole partition (through fstab) since NTFS isn't able to handle the permissions on it's own.",
            "title": "EXT4 File Permissions"
        },
        {
            "location": "/archive/ext4-file-permissions/#ext4-file-permissions",
            "text": "Is there a religious or philosophical reason why you didn't format the data partition in NTFS?   Here's the problem. Let's say you change ownership of the mounted partition to \"bart\" on Ubuntu: sudo chown bart /media/Data. Now bart can add a file to the data partition.  Now you reboot into Fedora and let's say your username in Fedora is also bart. The problem is \"bart\" in Fedora is not the same as \"bart\" in Ubuntu because their uid's are different. Bart in Ubuntu has a uid = 1000 whereas bart in Fedora is 500 ( I think - it's been a while ) and bart in Suse may be something else.  You could leave the ownership as root but change permissions to 777: sudo chmod 0777 /media/Data. Then everyone in every OS can add to the partition.  But there's a bigger problem ahead. When bart on ubuntu saves a file to the data partition it will save as owner:group = bart:bart and with permissions of 644. bart can read and write to the file in ubuntu but everyone else in ubuntu can only read. Since bart on Fedora has a different uid he can read the file but cannot edit the file.  You've got some options at this point. You could change the uid's of bart in every system to the same value so that bart = bart. You could change the umask in bashrc in every OS to 000 instead of 022 so that every file saved saves with permissions of 666 - which is the sign of the devil and is frowned upon. There are more complex solutions as well.  Or you could format the partition as NTFS. Then every OS will mount the partition thinking they own it - sort of like a usb stick - only internal.   It's not really an extra step as such, it's just that Ext filesystems support Linux file/directory ownerships and permissions, and therefore their ownership can be handled just like any other file or directory on your system.   It's the NTFS partition that needs the extra step of configuring the permissions at mount time for the whole partition (through fstab) since NTFS isn't able to handle the permissions on it's own.",
            "title": "EXT4 File Permissions"
        }
    ]
}