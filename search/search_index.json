{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"git/","text":"Git Git Reference \u2014 learn the most commonly used Git commands. Rebasing is like saying, \u201cI want to base my changes on what everybody has already done.\u201d git checkout a6ba3a1 README.md Log current branch git log --oneline Log all branches git log --oneline --all --decorate --graph Undo all fetches from remote A simply by removing this remote: git remote remove A git remote add A &lt;path/to/repository&gt; git fetch A &lt;name of branch&gt; Delete local branch git branch -d feature/login Delete remote branch git push origin --delete feature/login Remove any local remote-tracking branches which no longer exist on the remote git fetch --prune Stash git stash Apply the stash and then immediately drop it from your stack. git stash pop Push git push &lt;where&gt; &lt;what&gt; git push origin master Fetch Merge git fetch origin branch git merge --ff-only origin/deploy Diff Differences between last known state and current state. Diff between staging area and working directory git diff git difftool Diff between last commit on the current branch and working directory git diff HEAD git difftool HEAD Diff between last commit on the current branch and staging area git diff --staged HEAD Diff between a given commit and the latest one git diff a6ba3a1 HEAD git diff HEAD~3 HEAD Diff between branches git diff master origin/master Limit to one file git diff -- README.md Resources Git Essentials LiveLessons","title":"Git"},{"location":"git/#git","text":"Git Reference \u2014 learn the most commonly used Git commands. Rebasing is like saying, \u201cI want to base my changes on what everybody has already done.\u201d git checkout a6ba3a1 README.md Log current branch git log --oneline Log all branches git log --oneline --all --decorate --graph Undo all fetches from remote A simply by removing this remote: git remote remove A git remote add A &lt;path/to/repository&gt; git fetch A &lt;name of branch&gt; Delete local branch git branch -d feature/login Delete remote branch git push origin --delete feature/login Remove any local remote-tracking branches which no longer exist on the remote git fetch --prune","title":"Git"},{"location":"git/#stash","text":"git stash Apply the stash and then immediately drop it from your stack. git stash pop","title":"Stash"},{"location":"git/#push","text":"git push &lt;where&gt; &lt;what&gt; git push origin master","title":"Push"},{"location":"git/#fetch-merge","text":"git fetch origin branch git merge --ff-only origin/deploy","title":"Fetch Merge"},{"location":"git/#diff","text":"Differences between last known state and current state. Diff between staging area and working directory git diff git difftool Diff between last commit on the current branch and working directory git diff HEAD git difftool HEAD Diff between last commit on the current branch and staging area git diff --staged HEAD Diff between a given commit and the latest one git diff a6ba3a1 HEAD git diff HEAD~3 HEAD Diff between branches git diff master origin/master Limit to one file git diff -- README.md","title":"Diff"},{"location":"git/#resources","text":"Git Essentials LiveLessons","title":"Resources"},{"location":"linux/","text":"Linux Explain shell \u2014 help text for each command line argument. full-upgrade performs the function of upgrade but may also remove installed packages if that is required sudo apt update sudo apt full-upgrade Show the path of (shell) commands. which firefox whereis firefox mkdir -p creates parent directories if necessary mkdir -p path/to/directory/{file1,file2,file3} Ctrl+R #reverse-i-search date -u #UTC data info command command --help xdg-open . xdg-open http://codebicycle.com nslookup -debug rogifts.com. 8 .8.8.8 dig rogifts.com traceroute -w 2 rogifts.com grep --color = always \"search string\" * | less -R less -M # progress indicator / # search in man pages (n next occurrence, p) Process tree pstree Equivalent? echo $(which python) echo `which python` Globing (glob patterns) mv *.txt textfiles/ Auto-complete filenames Alt + / Shell expand $HOME Ctrl + Alt + E Command substitution $(command) touch file-$(date +%y-%m-%d) This should tell us if any of the intermediate directories are blocking the www-data user from opening the socket. sudo -u ww-data ls /var/opt/gitlab/gitlab-workhorse/socket Batch rename files # rename [ -v ] [ -n ] [ -f ] perlexpr [ files ] # test run rename -n \u2019s/ \\. htm$/ \\. html/\u2019 *.htm # verbose rename rename -v \u2019s/ \\. htm$/ \\. html/\u2019 *.htm","title":"Linux"},{"location":"linux/#linux","text":"Explain shell \u2014 help text for each command line argument. full-upgrade performs the function of upgrade but may also remove installed packages if that is required sudo apt update sudo apt full-upgrade Show the path of (shell) commands. which firefox whereis firefox mkdir -p creates parent directories if necessary mkdir -p path/to/directory/{file1,file2,file3} Ctrl+R #reverse-i-search date -u #UTC data info command command --help xdg-open . xdg-open http://codebicycle.com nslookup -debug rogifts.com. 8 .8.8.8 dig rogifts.com traceroute -w 2 rogifts.com grep --color = always \"search string\" * | less -R less -M # progress indicator / # search in man pages (n next occurrence, p) Process tree pstree Equivalent? echo $(which python) echo `which python` Globing (glob patterns) mv *.txt textfiles/ Auto-complete filenames Alt + / Shell expand $HOME Ctrl + Alt + E Command substitution $(command) touch file-$(date +%y-%m-%d) This should tell us if any of the intermediate directories are blocking the www-data user from opening the socket. sudo -u ww-data ls /var/opt/gitlab/gitlab-workhorse/socket Batch rename files # rename [ -v ] [ -n ] [ -f ] perlexpr [ files ] # test run rename -n \u2019s/ \\. htm$/ \\. html/\u2019 *.htm # verbose rename rename -v \u2019s/ \\. htm$/ \\. html/\u2019 *.htm","title":"Linux"},{"location":"notes/","text":"Notes Read logs tail -f log/development.log less log/development.log # Shift+F will take you to the end of the file, and continuously display new # contents. In other words, it behaves just like tail -f. less +F log/development.log # to display colors less -R file.log Install gems without sudo rbenv local <version> Postgres What's the default superuser username/password for postgres? sudo -u postgres psql postgres sudo -u postgres createuser -D -A -P myuser sudo -u postgres createdb -O myuser mydb psql myuser -h 127 .0.0.1 -d db_name Elements outline (dev tools) * { outline : 1 px solid green ; } HTTP servers (e.g. testing static sites on mobile devices) # install (requires nodejs/npm) npm install http-server -g #run http-server -p 8000 --cors # Python python -m http.server # localhost http://127.0.0.1:8000/ Cinnamon restart Ctrl+Alt+Esc (useful when reseting key bindings). Clear terminal Ctrl+L Recode, in place, all .srt files in current folder, from Central European (1250) to UTF-8 encoding. recode cp1250.. ./*.srt Omxplayer specify subtitle omxplayer -o hdmi -r file-name.avi --subtitles file-name.srt Download website wget -m -k -nH <http://site.url/> Turn off screen using command line xset dpms force off Jekyll post's update date Update post's modification date in the front matter with a git pre-commit hook. Create pre-commit file in .git/hooks/ with the following content 1 2 3 4 5 6 7 8 #! /bin/sh # Contents of .git/hooks/pre-commit git diff --cached --name-status | grep \"^M\" | while read a b ; do cat $b | sed \"/---.*/,/---.*/s/^update:.* $ /update: $( date -u \"+%Y-%m-%d\" ) /\" & gt ; tmp mv tmp $b git add $b done Add an update: field to post's front matter --- title : Post Title update : --- On git commit the update: field will update Sublime Text Ctrl+R goto symbol. With MarkdownEditing package navigate headings. F6 toggle spell checking on/off. Run multiple Firefox versions download desired firefox version https://ftp.mozilla.org/pub/firefox/releases/ extract archive and cd into the firefox directory cd firefox-52.4.0esr/firefox HOME = ` pwd ` ./firefox --no-remote Naming is_empty # boolean is_postable() # return boolean post_payment() Name things based on what they are and not what they look like (css classes). Javascript example: fetchFromServer ( \"getSomeTweets\" , displayTweets ); function displayTweets ( err , data ) { console . log ( data . tweets ); } Machine Learning classifiers support vector machines neural networks (nets) deep learning reinforcement learning REST Client asks for a resource and gets a representation of that resource. URI Every URL is a URI, but not every URI is a URL. ISBN numbers for instance are URI's but not URLS ;) Dynamic Programming, recursion + memoization + guessing Invariants are truths about objects of that class that should endure for the lifetime of the object. The MVC pattern allows the following interactions: A model can change its data depending upon inputs received from the controller. The changed data is reflected on the views, which are subscribed to changes in the model. Controllers can send commands to update the model's state, such as when making changes to a document. Controllers can also send commands to modify the presentation of a view without any change to the model, such as zooming in on a graph or chart. The MVC pattern implicitly includes a change propagation mechanism to notify each component of changes on the other dependent components. A number of web applications in the Python world implement MVC or a variation of it. We will look at a couple of them, namely Django and Flask, in the coming sections. Analysis What needs to be done. Output is a set of requirements. Visitors of the website need to be able to: apply for jobs browse, order products Design How things should be done. Output is an implementation specification. Convert requirements into an implementation specification. (set of classes and interfaces) name the objects define the behaviors Polymorphism multiple forms allows objects with different internal structures to have a common interface Algorithms Coursera Put pseudo-code into programs to understand algorithms better. Teddy bear programming \u2014 explain the problem to somebody, put it in words. Do one thing This implies that the blocks within if statements, else statements, while statements, and so on should be one line long. Probably that line should be a function call. Book: \"Mathematics for Computer Science\" by Eric Lehman Probability P(A and B) = P(A) * P(B) P(A or B) = P(A) + P(B) - P(A and B) Independent events Probability of getting heads on two coin flips P(HH) = P(H) * P(H) = 1/2 * 1/2 = 1/4 Gamblers fallacy: after getting n heads in a row the probability of getting another heads is still 1/2 (is not affected by the previous independent draws). Probability of getting tails on the first flip, heads on the second and tails on the third P(THT) = P(T) * P(H) * P(T) = 1/2 * 1/2 * 1/2 = 1/8 Circle Circumference: C = 2\u03c0r Area: A = \u03c0r^2 Electricity Electricity is the movement of electrons. Electrons create charge. Voltage is the difference in charge between two points. Current is the rate at which charge is flowing (flow of charge). Resistance is a material's tendency to resist the flow of charge (current). Javascript and Jquery The scope of Javascript functions is defined at the time the function is created. The scope is determined at the time the function is created, but the values of the variables in the scope are only retrieved at the time the function is called. this is a reference to the object that the function is created inside. getElementBy returns a live nodelist. querySelector returns a static nodelist. Docker A Docker image is the output of a docker build. The build process runs each of the instructions within a Dockerfile. docker build docker run &lt;image&gt; -it interactive terminal -d detached -p port docker stop docker start docker exec -it # interact with containers running in the background mount x11 socket export display volume Jessica Frazelle https://blog.jessfraz.com/ Google Clean Code Talks by Mi\u0161ko Hevery Never return a null, instead return a Null Object, e.g. an empty list. Don't mix instantiation with business logic, use factories, builders. Do as little work in constructors as possible. Ideally only assignments in constructors. Law of Demeter Asking for something you don't need directly only to get to what you really want. Only ask for objects you directly need (operate on). You are not supposed to know about things you don't directly need. Dependency injection, parent object does not make a child, it asks for child. So if child needs a new dependency the parent is not aware. e.g. House is not responsible for construction. If it needs a door it asks for one. The HouseFactory is responsible for construction. video Four biggest untestables Location of new operators Work in constructors Global State (Singletons) Law of Demeter violations Sandi Metz Novice programmers don\u2019t yet have the skills to write simple code. The message-based perspective yields more flexible applications than does the class-based perspective. Changing the fundamental design question from \u201cI know I need this class, what should it do?\u201d to \u201cI need to send this message, who should respond to it?\u201d is the first step in that direction. You don\u2019t send messages because you have objects, you have objects because you send messages. What vs how Ask for 'what' you want instead of telling 'how' to do it. Class is just one way for an object to acquire a public interface; the public interface an object obtains by way of its class may be one of several that it contains. It\u2019s not what an object is that matters (class), it\u2019s what it does (interface). Good design preserves maximum flexibility at minimum cost by putting off decisions at every opportunity, deferring commitments until more specific requirements arrive. The true purpose of testing, just like the true purpose of design, is to reduce costs. Incoming messages should be tested for the state they return. Outgoing command messages should be tested to ensure they get sent. Outgoing query messages should not be tested. Injecting Dependencies as Roles Inheritance is for specialization not for sharing code. Inject an object to play the role of the thing that varies. Null Object pattern By returning a null object (i.e. an empty list) there is no need to verify that the return value is in fact a list. The calling function may simply iterate the list as normal, effectively doing nothing. It is, however, still possible to check whether the return value is a null object (e.g. an empty list) and react differently if desired. Code smells are surface symptoms of deeper problems in the code. God object feature envy long method parameter creep cyclomatic complexity (too many branches or loops, convoluted logic difficult to follow) overly long or short identifiers Refactoring fix complex code first fix code smells fix low-hanging fruits (code style, conventions) Meta Find people that make me want to be better or smarter People that work hard, high integrity and low ego (how to stat a startup) Learn to work with other people in an programming environment (almost everything interesting built today is built in groups). Important skill to learn: How to explain something to somebody else. Course staff is there to help you learn, use them to learn more quickly and more efficiently. Build good habits now (discuss, don't copy). CS61A Spring 2015, The Structure and Interpretation of Computer Programs, John S. Denero Keep a dozen of your favorite problems present in your mind - Richard Feynman Get to the point. What do I get from learning the material? Compact lessons, broken up in bite-sized pieces. Design is redesign One of the least effective ways to design software architecture is to ignore the software systems that came before us. A month of coding can save an hour of architecting Resources Object-Oriented JavaScript by Marcus Phillips - Udacity , YouTube Javascript Design Patterns - Udacity Parenting101x The Science of Parenting - Edx JavaScript Domain-Driven Design - Safari","title":"Notes"},{"location":"notes/#notes","text":"Read logs tail -f log/development.log less log/development.log # Shift+F will take you to the end of the file, and continuously display new # contents. In other words, it behaves just like tail -f. less +F log/development.log # to display colors less -R file.log Install gems without sudo rbenv local <version> Postgres What's the default superuser username/password for postgres? sudo -u postgres psql postgres sudo -u postgres createuser -D -A -P myuser sudo -u postgres createdb -O myuser mydb psql myuser -h 127 .0.0.1 -d db_name Elements outline (dev tools) * { outline : 1 px solid green ; } HTTP servers (e.g. testing static sites on mobile devices) # install (requires nodejs/npm) npm install http-server -g #run http-server -p 8000 --cors # Python python -m http.server # localhost http://127.0.0.1:8000/ Cinnamon restart Ctrl+Alt+Esc (useful when reseting key bindings). Clear terminal Ctrl+L Recode, in place, all .srt files in current folder, from Central European (1250) to UTF-8 encoding. recode cp1250.. ./*.srt Omxplayer specify subtitle omxplayer -o hdmi -r file-name.avi --subtitles file-name.srt Download website wget -m -k -nH <http://site.url/> Turn off screen using command line xset dpms force off Jekyll post's update date Update post's modification date in the front matter with a git pre-commit hook. Create pre-commit file in .git/hooks/ with the following content 1 2 3 4 5 6 7 8 #! /bin/sh # Contents of .git/hooks/pre-commit git diff --cached --name-status | grep \"^M\" | while read a b ; do cat $b | sed \"/---.*/,/---.*/s/^update:.* $ /update: $( date -u \"+%Y-%m-%d\" ) /\" & gt ; tmp mv tmp $b git add $b done Add an update: field to post's front matter --- title : Post Title update : --- On git commit the update: field will update Sublime Text Ctrl+R goto symbol. With MarkdownEditing package navigate headings. F6 toggle spell checking on/off. Run multiple Firefox versions download desired firefox version https://ftp.mozilla.org/pub/firefox/releases/ extract archive and cd into the firefox directory cd firefox-52.4.0esr/firefox HOME = ` pwd ` ./firefox --no-remote Naming is_empty # boolean is_postable() # return boolean post_payment() Name things based on what they are and not what they look like (css classes). Javascript example: fetchFromServer ( \"getSomeTweets\" , displayTweets ); function displayTweets ( err , data ) { console . log ( data . tweets ); } Machine Learning classifiers support vector machines neural networks (nets) deep learning reinforcement learning REST Client asks for a resource and gets a representation of that resource. URI Every URL is a URI, but not every URI is a URL. ISBN numbers for instance are URI's but not URLS ;) Dynamic Programming, recursion + memoization + guessing Invariants are truths about objects of that class that should endure for the lifetime of the object. The MVC pattern allows the following interactions: A model can change its data depending upon inputs received from the controller. The changed data is reflected on the views, which are subscribed to changes in the model. Controllers can send commands to update the model's state, such as when making changes to a document. Controllers can also send commands to modify the presentation of a view without any change to the model, such as zooming in on a graph or chart. The MVC pattern implicitly includes a change propagation mechanism to notify each component of changes on the other dependent components. A number of web applications in the Python world implement MVC or a variation of it. We will look at a couple of them, namely Django and Flask, in the coming sections. Analysis What needs to be done. Output is a set of requirements. Visitors of the website need to be able to: apply for jobs browse, order products Design How things should be done. Output is an implementation specification. Convert requirements into an implementation specification. (set of classes and interfaces) name the objects define the behaviors Polymorphism multiple forms allows objects with different internal structures to have a common interface Algorithms Coursera Put pseudo-code into programs to understand algorithms better. Teddy bear programming \u2014 explain the problem to somebody, put it in words. Do one thing This implies that the blocks within if statements, else statements, while statements, and so on should be one line long. Probably that line should be a function call. Book: \"Mathematics for Computer Science\" by Eric Lehman Probability P(A and B) = P(A) * P(B) P(A or B) = P(A) + P(B) - P(A and B) Independent events Probability of getting heads on two coin flips P(HH) = P(H) * P(H) = 1/2 * 1/2 = 1/4 Gamblers fallacy: after getting n heads in a row the probability of getting another heads is still 1/2 (is not affected by the previous independent draws). Probability of getting tails on the first flip, heads on the second and tails on the third P(THT) = P(T) * P(H) * P(T) = 1/2 * 1/2 * 1/2 = 1/8 Circle Circumference: C = 2\u03c0r Area: A = \u03c0r^2 Electricity Electricity is the movement of electrons. Electrons create charge. Voltage is the difference in charge between two points. Current is the rate at which charge is flowing (flow of charge). Resistance is a material's tendency to resist the flow of charge (current).","title":"Notes"},{"location":"notes/#javascript-and-jquery","text":"The scope of Javascript functions is defined at the time the function is created. The scope is determined at the time the function is created, but the values of the variables in the scope are only retrieved at the time the function is called. this is a reference to the object that the function is created inside. getElementBy returns a live nodelist. querySelector returns a static nodelist.","title":"Javascript and Jquery"},{"location":"notes/#docker","text":"A Docker image is the output of a docker build. The build process runs each of the instructions within a Dockerfile. docker build docker run &lt;image&gt; -it interactive terminal -d detached -p port docker stop docker start docker exec -it # interact with containers running in the background mount x11 socket export display volume Jessica Frazelle https://blog.jessfraz.com/","title":"Docker"},{"location":"notes/#google-clean-code-talks-by-misko-hevery","text":"Never return a null, instead return a Null Object, e.g. an empty list. Don't mix instantiation with business logic, use factories, builders. Do as little work in constructors as possible. Ideally only assignments in constructors. Law of Demeter Asking for something you don't need directly only to get to what you really want. Only ask for objects you directly need (operate on). You are not supposed to know about things you don't directly need. Dependency injection, parent object does not make a child, it asks for child. So if child needs a new dependency the parent is not aware. e.g. House is not responsible for construction. If it needs a door it asks for one. The HouseFactory is responsible for construction. video Four biggest untestables Location of new operators Work in constructors Global State (Singletons) Law of Demeter violations","title":"Google Clean Code Talks by Mi\u0161ko Hevery"},{"location":"notes/#sandi-metz","text":"Novice programmers don\u2019t yet have the skills to write simple code. The message-based perspective yields more flexible applications than does the class-based perspective. Changing the fundamental design question from \u201cI know I need this class, what should it do?\u201d to \u201cI need to send this message, who should respond to it?\u201d is the first step in that direction. You don\u2019t send messages because you have objects, you have objects because you send messages. What vs how Ask for 'what' you want instead of telling 'how' to do it. Class is just one way for an object to acquire a public interface; the public interface an object obtains by way of its class may be one of several that it contains. It\u2019s not what an object is that matters (class), it\u2019s what it does (interface). Good design preserves maximum flexibility at minimum cost by putting off decisions at every opportunity, deferring commitments until more specific requirements arrive. The true purpose of testing, just like the true purpose of design, is to reduce costs. Incoming messages should be tested for the state they return. Outgoing command messages should be tested to ensure they get sent. Outgoing query messages should not be tested. Injecting Dependencies as Roles Inheritance is for specialization not for sharing code. Inject an object to play the role of the thing that varies. Null Object pattern By returning a null object (i.e. an empty list) there is no need to verify that the return value is in fact a list. The calling function may simply iterate the list as normal, effectively doing nothing. It is, however, still possible to check whether the return value is a null object (e.g. an empty list) and react differently if desired. Code smells are surface symptoms of deeper problems in the code. God object feature envy long method parameter creep cyclomatic complexity (too many branches or loops, convoluted logic difficult to follow) overly long or short identifiers Refactoring fix complex code first fix code smells fix low-hanging fruits (code style, conventions)","title":"Sandi Metz"},{"location":"notes/#meta","text":"Find people that make me want to be better or smarter People that work hard, high integrity and low ego (how to stat a startup) Learn to work with other people in an programming environment (almost everything interesting built today is built in groups). Important skill to learn: How to explain something to somebody else. Course staff is there to help you learn, use them to learn more quickly and more efficiently. Build good habits now (discuss, don't copy). CS61A Spring 2015, The Structure and Interpretation of Computer Programs, John S. Denero Keep a dozen of your favorite problems present in your mind - Richard Feynman Get to the point. What do I get from learning the material? Compact lessons, broken up in bite-sized pieces. Design is redesign One of the least effective ways to design software architecture is to ignore the software systems that came before us. A month of coding can save an hour of architecting","title":"Meta"},{"location":"notes/#resources","text":"Object-Oriented JavaScript by Marcus Phillips - Udacity , YouTube Javascript Design Patterns - Udacity Parenting101x The Science of Parenting - Edx JavaScript Domain-Driven Design - Safari","title":"Resources"},{"location":"python/","text":"Python PyPI - the Python Package Index The Hitchhiker\u2019s Guide to Python Consider a \"principle of least force\". * Remove line endings with rstrip() instead of strip(). * Use str.replace() instead of re.sub() when the former suffices to get the job done. * Prefer Fabric over Ansible for simple remote management tasks. Etc. List comparison techniques: # identity matters a is b # order matters; duplicates matter a == b # order ignored; duplicates matter Counter(a) == Counter(b) # both order and duplicates ignored set(a) == set(b) Cached computation @property def args(self): if self._args is None: parser = self.get_parser() self._args = parser.parse_args() return self._args Virtual environment pip install --upgrade pipenv Install from Pipfile, if there is one: pipenv install pipenv --three pipenv shell :::bash # virtualenvwrapper mkvirtualenv --python=`which python3` EnvName workon EnvName # Python's venv module python3 -m venv virtual_environment_name # -m module-name cd virtual_environment_name source bin/activate Python\u2019s default arguments are evaluated once when the function is defined, not each time the function is called. def append_to ( element , to = []): to . append ( element ) return to my_list = append_to ( 12 ) print my_list my_other_list = append_to ( 42 ) print my_other_list # [12] # [12, 42] A new list is created once when the function is defined, and the same list is used in each successive call. What you should do instead: def append_to ( element , to = None ): if to is None : to = [] to . append ( element ) return to Python\u2019s closures are late binding. This means that the values of variables used in closures are looked up at the time the inner function is called. + operator creates a new object path = [] path = path + [ start ] # creates a new list If send has multiple recipients, it is better to define it explicitly: send(message, recipients) and call it with send('Hello', ['God', 'Mom', 'Cthulhu']) than send(message, *args) . This way, the user of the function can manipulate the recipient list as a list beforehand, and it opens the possibility to pass any sequence, including iterators, that cannot be unpacked as other sequences. If it's not unique to an instance, it doesn't belong to an instance variable. Lambda's (make function) syntax is similar to def, but leaves out: name of the function parameters parenthesis return keyword def fn ( a , b , c ): return a + b + c lambda a , b , c : a + b + c Floor division x.__floordiv__(y) x // y Floor division and modulo divmod ( x , y ) else in loops for : ... else : # no break (loop not terminated by a break statement) ... Simultaneous state update eliminates out of order update errors allows high level thinking x , y = y , x + y x , y , dx , dy = ( x + dx * t , y + dy * t , ... , ... ) Use decorators to factor out administrative logic @cache def web_lookup ( url ): return urllib . urlopen ( url ) . read () def foo (): # do something def decorator ( func ): # manipulate func return func foo = decorator ( foo ) # Manually decorate @decorator def bar (): # Do something # bar() is decorated Context manager from contextlib import suppress with suppress ( FileNotFoundError ): os . remove ( 'somefile.tmp' ) Raymond Hettinger - Transforming Code into Beautiful, Idiomatic Python import functools import operator functools . reduce ( operator . add , range ( 10 )) # ((0 + 1) + 2) + 3 ... sum ( range ( 10 )) & gt ; & gt ; & gt ; map ( str , range ( 10 )) & gt ; & gt ; & gt ; next ( _ ) # _ result of last invocation map ( lambda m : m . name , sequence ) filter ( lambda x : x & gt ; 0 , [ 0 , - 1 , 3 , 4 , - 2 ]) # &lt;filter at 0x7f...&gt; [3, 4] Named slices name = slice ( 0 , 10 ) lastname = slice ( 10 , 20 ) line [ name ], line [ lastname ] Assertions are not for error handling (like checking arguments, we have exceptions for that) Assert results of implementation logic are sane assert result >= 0 Asserts should only fail if the code is wrong Assertions can be turned off random.choices selects with replacement (puts it back in urn before next draw) from random import choices , sample sample ([ 1 , 2 , 3 ], k = 3 ) # [1, 2, 3] choices ([ 1 , 2 , 3 ], k = 3 ) # [1, 1, 1] Do while construct while True : stuff () if fail_condition : break sys.path current search path (imports). timeit module from timeit import Timer def get_digits1 ( text ): c = \"\" for i in text : if i . isdigit (): c += i return c def get_digits2 ( text ): return filter ( str . isdigit , text ) def get_digits3 ( text ): return '' . join ( c for c in text if c . isdigit ()) if __name__ == '__main__' : count = 5000000 t = Timer ( \"get_digits1('abcdef123456789ghijklmnopq123456789')\" , \"from __main__ import get_digits1\" ) print t . timeit ( number = count ) t = Timer ( \"get_digits2('abcdef123456789ghijklmnopq123456789')\" , \"from __main__ import get_digits2\" ) print t . timeit ( number = count ) t = Timer ( \"get_digits3('abcdef123456789ghijklmnopq123456789')\" , \"from __main__ import get_digits3\" ) print t . timeit ( number = count ) # 19.990989106 # Your original solution # 16.7035926379 # Mine solution # 24.8638381019 # Accepted solution Debugging python -i file.py ipython -i file.py # inspect interactively after running script python -m pdb script.py # post-mortem (on exceptions) import pdb; pdb.pm() # pdb post-mortem import pdb; pdb.set_trace() # manual breakpoint help continue # next breakpoint next # next line, current context step # next, step into functions list # show context up return bt from IPython import embed; embed() type() callable('mystring'.__add__) True.__class__ True.__class__.__bases__ bool.__mro__ inspect.getmro(type(True)) dir(5.0) id(obj) a is b del a # Remove a from the namespace del # keyword locals() python -m cProfile script.py import cProfile cProfile.run('test()') Method Resolution Order or MRO &gt;&gt;&gt; pprint(LoggingOD.__mro__) (&lt;class '__main__.LoggingOD'&gt;, &lt;class '__main__.LoggingDict'&gt;, &lt;class 'collections.OrderedDict'&gt;, &lt;class 'dict'&gt;, &lt;class 'object'&gt;) &gt;&gt;&gt; LoggingOD.__bases__ (LoggingDict, OrderedDict) super() calls parents or ancestors of your children. super() means \"next in line\" (method resolution order). children get called before their parents parents stay in order Python\u2019s super() considered super! by Raymond Hettinger Debugging pretty printing print ( json . dumps ( obj , indent = 4 , sort_keys = True )) any_list = [ 1 , 2 , 3 ] dir ( any_list ) help ( any_list . reverse ) Place breakpoints in except clauses try : # code except ValueError : import pdb ; pdb . set_trace () from itertools import chain flatten = chain . from_iterable nested = [[ 1 , 2 ], [ 3 , 4 ], [ 4 , 5 ]] flatten ( nested ) # 1, 2, 3, 4, 5 def trace ( f ): \"Print a trace of the input and output of a function on one line.\" def traced_f ( * args ): result = f ( * args ) print ( '{}({}) = {}' . format ( f . __name__ , ', ' . join ( map ( str , args )), result ) ) return result return traced_f Logging import logging # logging.basicConfig(level=logging.DEBUG) # default WARNING logging . debug ( 'debug message' ) logging . info ( 'info message' ) logging . warning ( 'warning message' ) logger . info ( 'Unexpected exception' , exc_info = True ) Outside of exception scope logger.info('Not an exception', stack_info=True) Testing unittest # standard lib unittest.mock pytest pytest --pdb # Dropping to PDB (Python Debugger) on failures Pycharm debug tests Set breakpoints Attach debugger in python console Import and call pytest import pytest pytest . main ( args = [ __file__ ]) Extract the functionality that doesn't need to talk to the database to a separate method and test it separately. Jupyter Notebook ! ls -l # shell commands % magic %% time # single run %% timeit # multiple runs %% prun # profiling Django Model field arguments null : If True, Django will store blank values as NULL in the database for fields where this is appropriate (a CharField will instead store an empty string). The default is False. blank : If True, the field is allowed to be blank in your forms. The default is False, which means that Django's form validation will force you to enter a value. This is often used with null=True , because if you're going to allow blank values, you also want the database to be able to represent them appropriately. {% block title %} Login | {{ block .super }}{% endblock title %} Beyond PEP 8 by Raymond Hettinger recognize non-pythonic APIs don't get distracted by PEP 8, focus first on Pythonic versus NonPythonic when needed write an adapter class avoid unnecessary packaging in favor of simpler imports create custom exceptions use properties instead of getter methods create a context manager for recurring set-up and teardown logic use magic methods: __len__ , __getitem__ add good __repr__ for better debuggability def __repr__ ( self ): return '{}({})' . format ( self . __class__ . __name__ , self . data ) Design Patterns with Python - Pluralsight Interface - Abstract Base Class Behavioral Strategy Pattern Observer Pattern Unit TEsting with Python - Pluralsight Unit tests run in memory. It's not unit test if it uses... the file system a database the network external dependencies deployment Regression - something that used to work, doesn't anymore. Test Double - like 'Stunt Double' Test Stub (hard codded answer) Fake Object (real implementation, yet unsuitable for production) Mock Object (was method called?) Test spy (query afterwards what happened) Dummy Object (interface requires an argument, not used by the test) Three kinds of Assert Check the return value or an exception Check a state change (public API) Check a method call (mock or spy) Monkey Patching Python Epiphanies - Safari A decorator changes or adds to the functionality of a function either by modifying its arguments before the function is called, or changing its return value afterwards, or both. Decorators pass the body of the defined function to the decorator function modify namespace, the name of the defined function points to the decorator function's return value Designing Data Structures in Python, George T. Heineman - Safari def getMin ( self ): if self . root is None : raise ValueError ( 'Binary Tree is empty' ) n = self . root while n . left : n = n . left return n . value Python Beyond The Basics - Object Oriented Programming Object attribute lookup hierarchy instance class any class from which the class inherits Python Data Structures - Safari if 'key' not in dictionary : dictionary [ 'key' ] = set () dictionary [ 'key' ] . add ( 'value' ) dictionary . setdefault ( 'key' , set ()) . add ( 'value' ) from collections import defaultdict set . remove ( item ) set . discard ( item ) # no KeyError frozenset () # imutable Python Programming Language, David Beazley - Safari for idx , item in enumerate ( items , start = 1 ): pass getattr ( obj , 'name' ) # obj.name setattr ( obj , 'cost' , 10 ) # obj.cost = 10 del obj . name obj . __dict__ obj . __class__ . __dict__ vars ( obj . __class__ ) @property @price.setter after ( 5 , lambda : greeting ( 'Guido' )) func . __name__ Dive into Python3 Separate code from data. e.g. Pluralization rules are data, they belong in a separate file. Implement cache. Modern Python by Raymond Hettinger Lambda make function defer computation, make a promise Run a computation at some point in the future f = lambda : x ** y f () zip * means transpose zip(*data) defaultdict use for grouping data (list, set) accumulation reverse one-to-many mapping Expand wildcard glob.glob('*.txt') Wrap in csv reader import csv with open ( 'file.csv' ) as f : for row in csv . reader ( f ): print ( row ) Python: Programming efficiently - Lynda.com itertools . chain ( iter1 , iter2 ) # concatenate i1 , i2 = itertools . tee ( iter , 2 ) # duplicate itertools . accumulate ( iter ) # running sum itertools . product ( iter1 , iter2 ) # element-by-element product Sets cannot have a mutable element, like list, set or dictionary, as its elements. x and y first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned. x or y first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned. Note that neither and nor or restrict the value and type they return to False and True, but rather return the last evaluated argument. Python Data Structures - Safari Object attributes without underscores any_dict = {} [ attr for attr in dir ( any_dict ) if '__' not in attr ] Working with Algorithms in Python, by George Heineman - Safari binary array search binary search tree balanced binary search tree mergesort exponentiation by squaring peg solitaire magic squares Graph representation adjacency matrix (dense edges) adjacency list (sparse edges) Shortest path in a graph Dijkstra - flood fill A* - use heuristic Dynamic programming solve small, constrained versions of problem systematically relax constraints until solution e.g. Shortest path, minimum cost (by generating all pairs shortest paths) Floyd Warshall algorithm Include weights of arcs in graph as a best short estimate; add 0 on the diagonal and infinity where there is no arc (adjacency matrix); smallest constrained version of problem. Relax the constraints. First allow path to include vertex v0. Check if traveling through v0 has a lower cost than the direct arc. Then allow path to include each node, one by one. Use another predecessor array to recreate paths. Python Design Patterns - Safari video overriding - different implementation of a method defined in a superclass overloading - method with the same name but different arguments interface - defines just the methods abstract base class - may also define attributes Creational Patterns Abstract the task of creating of an object from the details of creating it. Factory - create objects from a family of related objects (know at runtime which type) Builder - complex objects Prototype - objects with costly creation (clone instead of __init__ ) Singleton and Borg - only one instance or shared state Structural Patterns MVC - separation of concerns in UIs Facade - abstract complexities of subsystems Proxy - control or alter access to a certain class Decorator - dynamic runtime composition Adapter - make two incompatible interfaces work together Problem Solving with Algorithms and Data Structures using Python Stack, LIFO ordering based on length of time in the collection removal order is the reverse order of insertion can be used to reverse order of items Queue, FIFO Deque items are added and removed from either end Convert decimal numbers to binary Divide by 2 and keep track of the remainder, reverse remainders Divide by base (general) Data Visualization Basics with Python Clearly define the story What should the visualization communicate? Pick the right chart What charts tells the story more clearly without adding to much information? Assess your visualization Can you immediately see the story? Are there distractions? Minimal use multiple colors only when color adds more information color schemes: qualitative, sequential, diverging http://colorbrewer2.org color blindness print well B&W 3D charts? Does it add more data? No! keep it simple no chart junk Types bar line chart pie chart stacked areas (trends) histogram scatter plots CDF cumulative distribution function WTF http://viz.wtf http://reddit.com/r/dataIsUgly Modular Programming with Python - Safari Code examples, architecture Breakdown program functionality e.g. Inventory system Storing information Interacting with the user Generationg reports Resources Design of Computer Programs by Peter Norvig - Udacity Web Scraping with Python by Richard Lawson Learning Scrapy by Dimitrios Kouzis-Loukas Intermediate Django - Safari Learning Python Application Development - Safari design patterns (pythonic vs NonPythonic) strategy simple factory abstract factory Enterprise Software with Python pythontesting.net pythondoeswhat.blogspot.com Planet Python interactivepython.org Python Koans Intermediate Python Programming - Safari Code Dojo TDD - Pluralsight Effective Python - Safari Two Scoops of Django: Best Practices for Django 1.8 Elasticsearch Essentials - Safari Python Machine Learning Projects - Safari Python Data Visualization Solutions - Safari Importing data (csv, fixed width, etc.)","title":"Python"},{"location":"python/#python","text":"PyPI - the Python Package Index The Hitchhiker\u2019s Guide to Python Consider a \"principle of least force\". * Remove line endings with rstrip() instead of strip(). * Use str.replace() instead of re.sub() when the former suffices to get the job done. * Prefer Fabric over Ansible for simple remote management tasks. Etc. List comparison techniques: # identity matters a is b # order matters; duplicates matter a == b # order ignored; duplicates matter Counter(a) == Counter(b) # both order and duplicates ignored set(a) == set(b) Cached computation @property def args(self): if self._args is None: parser = self.get_parser() self._args = parser.parse_args() return self._args Virtual environment pip install --upgrade pipenv Install from Pipfile, if there is one: pipenv install pipenv --three pipenv shell :::bash # virtualenvwrapper mkvirtualenv --python=`which python3` EnvName workon EnvName # Python's venv module python3 -m venv virtual_environment_name # -m module-name cd virtual_environment_name source bin/activate Python\u2019s default arguments are evaluated once when the function is defined, not each time the function is called. def append_to ( element , to = []): to . append ( element ) return to my_list = append_to ( 12 ) print my_list my_other_list = append_to ( 42 ) print my_other_list # [12] # [12, 42] A new list is created once when the function is defined, and the same list is used in each successive call. What you should do instead: def append_to ( element , to = None ): if to is None : to = [] to . append ( element ) return to Python\u2019s closures are late binding. This means that the values of variables used in closures are looked up at the time the inner function is called. + operator creates a new object path = [] path = path + [ start ] # creates a new list If send has multiple recipients, it is better to define it explicitly: send(message, recipients) and call it with send('Hello', ['God', 'Mom', 'Cthulhu']) than send(message, *args) . This way, the user of the function can manipulate the recipient list as a list beforehand, and it opens the possibility to pass any sequence, including iterators, that cannot be unpacked as other sequences. If it's not unique to an instance, it doesn't belong to an instance variable. Lambda's (make function) syntax is similar to def, but leaves out: name of the function parameters parenthesis return keyword def fn ( a , b , c ): return a + b + c lambda a , b , c : a + b + c Floor division x.__floordiv__(y) x // y Floor division and modulo divmod ( x , y ) else in loops for : ... else : # no break (loop not terminated by a break statement) ... Simultaneous state update eliminates out of order update errors allows high level thinking x , y = y , x + y x , y , dx , dy = ( x + dx * t , y + dy * t , ... , ... ) Use decorators to factor out administrative logic @cache def web_lookup ( url ): return urllib . urlopen ( url ) . read () def foo (): # do something def decorator ( func ): # manipulate func return func foo = decorator ( foo ) # Manually decorate @decorator def bar (): # Do something # bar() is decorated Context manager from contextlib import suppress with suppress ( FileNotFoundError ): os . remove ( 'somefile.tmp' ) Raymond Hettinger - Transforming Code into Beautiful, Idiomatic Python import functools import operator functools . reduce ( operator . add , range ( 10 )) # ((0 + 1) + 2) + 3 ... sum ( range ( 10 )) & gt ; & gt ; & gt ; map ( str , range ( 10 )) & gt ; & gt ; & gt ; next ( _ ) # _ result of last invocation map ( lambda m : m . name , sequence ) filter ( lambda x : x & gt ; 0 , [ 0 , - 1 , 3 , 4 , - 2 ]) # &lt;filter at 0x7f...&gt; [3, 4] Named slices name = slice ( 0 , 10 ) lastname = slice ( 10 , 20 ) line [ name ], line [ lastname ] Assertions are not for error handling (like checking arguments, we have exceptions for that) Assert results of implementation logic are sane assert result >= 0 Asserts should only fail if the code is wrong Assertions can be turned off random.choices selects with replacement (puts it back in urn before next draw) from random import choices , sample sample ([ 1 , 2 , 3 ], k = 3 ) # [1, 2, 3] choices ([ 1 , 2 , 3 ], k = 3 ) # [1, 1, 1] Do while construct while True : stuff () if fail_condition : break sys.path current search path (imports). timeit module from timeit import Timer def get_digits1 ( text ): c = \"\" for i in text : if i . isdigit (): c += i return c def get_digits2 ( text ): return filter ( str . isdigit , text ) def get_digits3 ( text ): return '' . join ( c for c in text if c . isdigit ()) if __name__ == '__main__' : count = 5000000 t = Timer ( \"get_digits1('abcdef123456789ghijklmnopq123456789')\" , \"from __main__ import get_digits1\" ) print t . timeit ( number = count ) t = Timer ( \"get_digits2('abcdef123456789ghijklmnopq123456789')\" , \"from __main__ import get_digits2\" ) print t . timeit ( number = count ) t = Timer ( \"get_digits3('abcdef123456789ghijklmnopq123456789')\" , \"from __main__ import get_digits3\" ) print t . timeit ( number = count ) # 19.990989106 # Your original solution # 16.7035926379 # Mine solution # 24.8638381019 # Accepted solution","title":"Python"},{"location":"python/#debugging","text":"python -i file.py ipython -i file.py # inspect interactively after running script python -m pdb script.py # post-mortem (on exceptions) import pdb; pdb.pm() # pdb post-mortem import pdb; pdb.set_trace() # manual breakpoint help continue # next breakpoint next # next line, current context step # next, step into functions list # show context up return bt from IPython import embed; embed() type() callable('mystring'.__add__) True.__class__ True.__class__.__bases__ bool.__mro__ inspect.getmro(type(True)) dir(5.0) id(obj) a is b del a # Remove a from the namespace del # keyword locals() python -m cProfile script.py import cProfile cProfile.run('test()') Method Resolution Order or MRO &gt;&gt;&gt; pprint(LoggingOD.__mro__) (&lt;class '__main__.LoggingOD'&gt;, &lt;class '__main__.LoggingDict'&gt;, &lt;class 'collections.OrderedDict'&gt;, &lt;class 'dict'&gt;, &lt;class 'object'&gt;) &gt;&gt;&gt; LoggingOD.__bases__ (LoggingDict, OrderedDict) super() calls parents or ancestors of your children. super() means \"next in line\" (method resolution order). children get called before their parents parents stay in order Python\u2019s super() considered super! by Raymond Hettinger Debugging pretty printing print ( json . dumps ( obj , indent = 4 , sort_keys = True )) any_list = [ 1 , 2 , 3 ] dir ( any_list ) help ( any_list . reverse ) Place breakpoints in except clauses try : # code except ValueError : import pdb ; pdb . set_trace () from itertools import chain flatten = chain . from_iterable nested = [[ 1 , 2 ], [ 3 , 4 ], [ 4 , 5 ]] flatten ( nested ) # 1, 2, 3, 4, 5 def trace ( f ): \"Print a trace of the input and output of a function on one line.\" def traced_f ( * args ): result = f ( * args ) print ( '{}({}) = {}' . format ( f . __name__ , ', ' . join ( map ( str , args )), result ) ) return result return traced_f","title":"Debugging"},{"location":"python/#logging","text":"import logging # logging.basicConfig(level=logging.DEBUG) # default WARNING logging . debug ( 'debug message' ) logging . info ( 'info message' ) logging . warning ( 'warning message' ) logger . info ( 'Unexpected exception' , exc_info = True ) Outside of exception scope logger.info('Not an exception', stack_info=True)","title":"Logging"},{"location":"python/#testing","text":"unittest # standard lib unittest.mock pytest pytest --pdb # Dropping to PDB (Python Debugger) on failures Pycharm debug tests Set breakpoints Attach debugger in python console Import and call pytest import pytest pytest . main ( args = [ __file__ ]) Extract the functionality that doesn't need to talk to the database to a separate method and test it separately.","title":"Testing"},{"location":"python/#jupyter-notebook","text":"! ls -l # shell commands % magic %% time # single run %% timeit # multiple runs %% prun # profiling","title":"Jupyter Notebook"},{"location":"python/#django","text":"Model field arguments null : If True, Django will store blank values as NULL in the database for fields where this is appropriate (a CharField will instead store an empty string). The default is False. blank : If True, the field is allowed to be blank in your forms. The default is False, which means that Django's form validation will force you to enter a value. This is often used with null=True , because if you're going to allow blank values, you also want the database to be able to represent them appropriately. {% block title %} Login | {{ block .super }}{% endblock title %}","title":"Django"},{"location":"python/#beyond-pep-8-by-raymond-hettinger","text":"recognize non-pythonic APIs don't get distracted by PEP 8, focus first on Pythonic versus NonPythonic when needed write an adapter class avoid unnecessary packaging in favor of simpler imports create custom exceptions use properties instead of getter methods create a context manager for recurring set-up and teardown logic use magic methods: __len__ , __getitem__ add good __repr__ for better debuggability def __repr__ ( self ): return '{}({})' . format ( self . __class__ . __name__ , self . data )","title":"Beyond PEP 8 by Raymond Hettinger"},{"location":"python/#design-patterns-with-python-pluralsight","text":"Interface - Abstract Base Class Behavioral Strategy Pattern Observer Pattern","title":"Design Patterns with Python - Pluralsight"},{"location":"python/#unit-testing-with-python-pluralsight","text":"Unit tests run in memory. It's not unit test if it uses... the file system a database the network external dependencies deployment Regression - something that used to work, doesn't anymore. Test Double - like 'Stunt Double' Test Stub (hard codded answer) Fake Object (real implementation, yet unsuitable for production) Mock Object (was method called?) Test spy (query afterwards what happened) Dummy Object (interface requires an argument, not used by the test) Three kinds of Assert Check the return value or an exception Check a state change (public API) Check a method call (mock or spy) Monkey Patching","title":"Unit TEsting with Python - Pluralsight"},{"location":"python/#python-epiphanies-safari","text":"A decorator changes or adds to the functionality of a function either by modifying its arguments before the function is called, or changing its return value afterwards, or both. Decorators pass the body of the defined function to the decorator function modify namespace, the name of the defined function points to the decorator function's return value","title":"Python Epiphanies - Safari"},{"location":"python/#designing-data-structures-in-python-george-t-heineman-safari","text":"def getMin ( self ): if self . root is None : raise ValueError ( 'Binary Tree is empty' ) n = self . root while n . left : n = n . left return n . value","title":"Designing Data Structures in Python, George T. Heineman - Safari"},{"location":"python/#python-beyond-the-basics-object-oriented-programming","text":"Object attribute lookup hierarchy instance class any class from which the class inherits","title":"Python Beyond The Basics - Object Oriented Programming"},{"location":"python/#python-data-structures-safari","text":"if 'key' not in dictionary : dictionary [ 'key' ] = set () dictionary [ 'key' ] . add ( 'value' ) dictionary . setdefault ( 'key' , set ()) . add ( 'value' ) from collections import defaultdict set . remove ( item ) set . discard ( item ) # no KeyError frozenset () # imutable","title":"Python Data Structures - Safari"},{"location":"python/#python-programming-language-david-beazley-safari","text":"for idx , item in enumerate ( items , start = 1 ): pass getattr ( obj , 'name' ) # obj.name setattr ( obj , 'cost' , 10 ) # obj.cost = 10 del obj . name obj . __dict__ obj . __class__ . __dict__ vars ( obj . __class__ ) @property @price.setter after ( 5 , lambda : greeting ( 'Guido' )) func . __name__","title":"Python Programming Language, David Beazley - Safari"},{"location":"python/#dive-into-python3","text":"Separate code from data. e.g. Pluralization rules are data, they belong in a separate file. Implement cache.","title":"Dive into Python3"},{"location":"python/#modern-python-by-raymond-hettinger","text":"Lambda make function defer computation, make a promise Run a computation at some point in the future f = lambda : x ** y f () zip * means transpose zip(*data) defaultdict use for grouping data (list, set) accumulation reverse one-to-many mapping Expand wildcard glob.glob('*.txt') Wrap in csv reader import csv with open ( 'file.csv' ) as f : for row in csv . reader ( f ): print ( row )","title":"Modern Python by Raymond Hettinger"},{"location":"python/#python-programming-efficiently-lyndacom","text":"itertools . chain ( iter1 , iter2 ) # concatenate i1 , i2 = itertools . tee ( iter , 2 ) # duplicate itertools . accumulate ( iter ) # running sum itertools . product ( iter1 , iter2 ) # element-by-element product Sets cannot have a mutable element, like list, set or dictionary, as its elements. x and y first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned. x or y first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned. Note that neither and nor or restrict the value and type they return to False and True, but rather return the last evaluated argument. Python Data Structures - Safari Object attributes without underscores any_dict = {} [ attr for attr in dir ( any_dict ) if '__' not in attr ]","title":"Python: Programming efficiently - Lynda.com"},{"location":"python/#working-with-algorithms-in-python-by-george-heineman-safari","text":"binary array search binary search tree balanced binary search tree mergesort exponentiation by squaring peg solitaire magic squares Graph representation adjacency matrix (dense edges) adjacency list (sparse edges) Shortest path in a graph Dijkstra - flood fill A* - use heuristic Dynamic programming solve small, constrained versions of problem systematically relax constraints until solution e.g. Shortest path, minimum cost (by generating all pairs shortest paths) Floyd Warshall algorithm Include weights of arcs in graph as a best short estimate; add 0 on the diagonal and infinity where there is no arc (adjacency matrix); smallest constrained version of problem. Relax the constraints. First allow path to include vertex v0. Check if traveling through v0 has a lower cost than the direct arc. Then allow path to include each node, one by one. Use another predecessor array to recreate paths.","title":"Working with Algorithms in Python, by George Heineman - Safari"},{"location":"python/#python-design-patterns-safari-video","text":"overriding - different implementation of a method defined in a superclass overloading - method with the same name but different arguments interface - defines just the methods abstract base class - may also define attributes Creational Patterns Abstract the task of creating of an object from the details of creating it. Factory - create objects from a family of related objects (know at runtime which type) Builder - complex objects Prototype - objects with costly creation (clone instead of __init__ ) Singleton and Borg - only one instance or shared state Structural Patterns MVC - separation of concerns in UIs Facade - abstract complexities of subsystems Proxy - control or alter access to a certain class Decorator - dynamic runtime composition Adapter - make two incompatible interfaces work together","title":"Python Design Patterns - Safari video"},{"location":"python/#problem-solving-with-algorithms-and-data-structures-using-python","text":"Stack, LIFO ordering based on length of time in the collection removal order is the reverse order of insertion can be used to reverse order of items Queue, FIFO Deque items are added and removed from either end Convert decimal numbers to binary Divide by 2 and keep track of the remainder, reverse remainders Divide by base (general)","title":"Problem Solving with Algorithms and Data Structures using Python"},{"location":"python/#data-visualization-basics-with-python","text":"Clearly define the story What should the visualization communicate? Pick the right chart What charts tells the story more clearly without adding to much information? Assess your visualization Can you immediately see the story? Are there distractions? Minimal use multiple colors only when color adds more information color schemes: qualitative, sequential, diverging http://colorbrewer2.org color blindness print well B&W 3D charts? Does it add more data? No! keep it simple no chart junk Types bar line chart pie chart stacked areas (trends) histogram scatter plots CDF cumulative distribution function WTF http://viz.wtf http://reddit.com/r/dataIsUgly","title":"Data Visualization Basics with Python"},{"location":"python/#modular-programming-with-python-safari","text":"Code examples, architecture Breakdown program functionality e.g. Inventory system Storing information Interacting with the user Generationg reports","title":"Modular Programming with Python - Safari"},{"location":"python/#resources","text":"Design of Computer Programs by Peter Norvig - Udacity Web Scraping with Python by Richard Lawson Learning Scrapy by Dimitrios Kouzis-Loukas Intermediate Django - Safari Learning Python Application Development - Safari design patterns (pythonic vs NonPythonic) strategy simple factory abstract factory Enterprise Software with Python pythontesting.net pythondoeswhat.blogspot.com Planet Python interactivepython.org Python Koans Intermediate Python Programming - Safari Code Dojo TDD - Pluralsight Effective Python - Safari Two Scoops of Django: Best Practices for Django 1.8 Elasticsearch Essentials - Safari Python Machine Learning Projects - Safari Python Data Visualization Solutions - Safari Importing data (csv, fixed width, etc.)","title":"Resources"},{"location":"solid/","text":"SOLID SOLID Principles Single Responsibility Principle \u2014 Classes should have only one reason to change Open Closed Principle \u2014 Open for extension, closed for modification Liskov's Substitution Principle \u2014 Base types should be replaceable by subtypes Interface Segregation \u2014 Better to have many smaller interfaces than a big one Dependency Inversion \u2014 Depend upon abstractions not concretions Single Responsibility Principle only one reason to change small class separation of concerns do one thing, and do it well high cohesion, low coupling e.g. It is not the responsibility of User to know how a booking is made. User should not change when booking logic changes. Open, Closed open for extension, closed for modification existing code shouldn't be modified when adding new features abstractions, interfaces e.g. Don't add another elif clause that checks a type, instead add another class that does exactly what you need. Liskov's Substitution Objects of type may be replaced with objects of a subtype without altering the correctness of the program. Interface Segregation Better to have many smaller interfaces than a big one. Don't force classes to implement methods that don't concern them. e.g. You don't need card details when making a cash payment. Dependency Inversion Depend on an interface not on a concrete class. e.g. The base class should depend on a interface (have a interface as a member instead of a concrete class). The consuming class should receive the correct object that implements the interface. Don't do type checking. SOLID principles part 1 , part 2 on YouTube. Encapsulation and SOLID - Pluralsight Command-query separation queries return data do not mutate state idempotent safe to invoke commands have side effects ok to invoke queries from commands Postel's law (Robustness principle) Be conservative in what you send (guarantees about output, contract) Be liberal in what you accept (tolerant of inputs) Fail fast Abstraction is the process of hiding complexity: separate what you want from how you do it. e.g. function call vs function body; the function hides the complexity of how the task is performed. Encapsulation Hide the representation of data, and provide functions for setting, retrieving and manipulating data. Hide the details of how information is stored. Separate what you are storing from how it is stored Do something extra when a value is set e.g. update a counter, save in database, error-checking.","title":"SOLID"},{"location":"solid/#solid","text":"","title":"SOLID"},{"location":"solid/#solid-principles","text":"Single Responsibility Principle \u2014 Classes should have only one reason to change Open Closed Principle \u2014 Open for extension, closed for modification Liskov's Substitution Principle \u2014 Base types should be replaceable by subtypes Interface Segregation \u2014 Better to have many smaller interfaces than a big one Dependency Inversion \u2014 Depend upon abstractions not concretions","title":"SOLID Principles"},{"location":"solid/#single-responsibility-principle","text":"only one reason to change small class separation of concerns do one thing, and do it well high cohesion, low coupling e.g. It is not the responsibility of User to know how a booking is made. User should not change when booking logic changes.","title":"Single Responsibility Principle"},{"location":"solid/#open-closed","text":"open for extension, closed for modification existing code shouldn't be modified when adding new features abstractions, interfaces e.g. Don't add another elif clause that checks a type, instead add another class that does exactly what you need.","title":"Open, Closed"},{"location":"solid/#liskovs-substitution","text":"Objects of type may be replaced with objects of a subtype without altering the correctness of the program.","title":"Liskov's Substitution"},{"location":"solid/#interface-segregation","text":"Better to have many smaller interfaces than a big one. Don't force classes to implement methods that don't concern them. e.g. You don't need card details when making a cash payment.","title":"Interface Segregation"},{"location":"solid/#dependency-inversion","text":"Depend on an interface not on a concrete class. e.g. The base class should depend on a interface (have a interface as a member instead of a concrete class). The consuming class should receive the correct object that implements the interface. Don't do type checking. SOLID principles part 1 , part 2 on YouTube.","title":"Dependency Inversion"},{"location":"solid/#encapsulation-and-solid-pluralsight","text":"Command-query separation queries return data do not mutate state idempotent safe to invoke commands have side effects ok to invoke queries from commands Postel's law (Robustness principle) Be conservative in what you send (guarantees about output, contract) Be liberal in what you accept (tolerant of inputs) Fail fast Abstraction is the process of hiding complexity: separate what you want from how you do it. e.g. function call vs function body; the function hides the complexity of how the task is performed. Encapsulation Hide the representation of data, and provide functions for setting, retrieving and manipulating data. Hide the details of how information is stored. Separate what you are storing from how it is stored Do something extra when a value is set e.g. update a counter, save in database, error-checking.","title":"Encapsulation and SOLID - Pluralsight"},{"location":"archive/ext4-file-permissions/","text":"EXT4 File Permissions Is there a religious or philosophical reason why you didn't format the data partition in NTFS? Here's the problem. Let's say you change ownership of the mounted partition to \"bart\" on Ubuntu: sudo chown bart /media/Data. Now bart can add a file to the data partition. Now you reboot into Fedora and let's say your username in Fedora is also bart. The problem is \"bart\" in Fedora is not the same as \"bart\" in Ubuntu because their uid's are different. Bart in Ubuntu has a uid = 1000 whereas bart in Fedora is 500 ( I think - it's been a while ) and bart in Suse may be something else. You could leave the ownership as root but change permissions to 777: sudo chmod 0777 /media/Data. Then everyone in every OS can add to the partition. But there's a bigger problem ahead. When bart on ubuntu saves a file to the data partition it will save as owner:group = bart:bart and with permissions of 644. bart can read and write to the file in ubuntu but everyone else in ubuntu can only read. Since bart on Fedora has a different uid he can read the file but cannot edit the file. You've got some options at this point. You could change the uid's of bart in every system to the same value so that bart = bart. You could change the umask in bashrc in every OS to 000 instead of 022 so that every file saved saves with permissions of 666 - which is the sign of the devil and is frowned upon. There are more complex solutions as well. Or you could format the partition as NTFS. Then every OS will mount the partition thinking they own it - sort of like a usb stick - only internal. It's not really an extra step as such, it's just that Ext filesystems support Linux file/directory ownerships and permissions, and therefore their ownership can be handled just like any other file or directory on your system. It's the NTFS partition that needs the extra step of configuring the permissions at mount time for the whole partition (through fstab) since NTFS isn't able to handle the permissions on it's own.","title":"EXT4 File Permissions"},{"location":"archive/ext4-file-permissions/#ext4-file-permissions","text":"Is there a religious or philosophical reason why you didn't format the data partition in NTFS? Here's the problem. Let's say you change ownership of the mounted partition to \"bart\" on Ubuntu: sudo chown bart /media/Data. Now bart can add a file to the data partition. Now you reboot into Fedora and let's say your username in Fedora is also bart. The problem is \"bart\" in Fedora is not the same as \"bart\" in Ubuntu because their uid's are different. Bart in Ubuntu has a uid = 1000 whereas bart in Fedora is 500 ( I think - it's been a while ) and bart in Suse may be something else. You could leave the ownership as root but change permissions to 777: sudo chmod 0777 /media/Data. Then everyone in every OS can add to the partition. But there's a bigger problem ahead. When bart on ubuntu saves a file to the data partition it will save as owner:group = bart:bart and with permissions of 644. bart can read and write to the file in ubuntu but everyone else in ubuntu can only read. Since bart on Fedora has a different uid he can read the file but cannot edit the file. You've got some options at this point. You could change the uid's of bart in every system to the same value so that bart = bart. You could change the umask in bashrc in every OS to 000 instead of 022 so that every file saved saves with permissions of 666 - which is the sign of the devil and is frowned upon. There are more complex solutions as well. Or you could format the partition as NTFS. Then every OS will mount the partition thinking they own it - sort of like a usb stick - only internal. It's not really an extra step as such, it's just that Ext filesystems support Linux file/directory ownerships and permissions, and therefore their ownership can be handled just like any other file or directory on your system. It's the NTFS partition that needs the extra step of configuring the permissions at mount time for the whole partition (through fstab) since NTFS isn't able to handle the permissions on it's own.","title":"EXT4 File Permissions"},{"location":"archive/session-fixation/","text":"Session Fixation Session fixation and session hijacking are both attempts to gain access to a system as another user. causes a victim to use a session id chosen by an attacker Protection Delete the old session id and create a new session id, when authenticating a user. A sells a car to B A doesn't give all of the keys to B and keeps one If B doesn't change the lock, A could still use it. If the session id remains the same before and after log-in, it is vulnerable. specific to session implementations that use a session Id. Flask by default doesn't use a session Id. Process Attacker A gives a session id to B After B authenticates, the server does not update the session id value A can use the session id to log in to B's account. Example Amazon When someone goes to Amazon they can add products in cart without logging in. When they decide to log in, Amazon links the unauthenticated session data with the authenticated user If Amazon did not create a new session id on authentication: an attacker might go to Amazon first get an unauthenticated session id fixate that session id in the victim browser and wait for it to log in after the victim logs in, with the attacker fixated session, the attacker refreshes their browser and they will be authenticated as the victim. Sources Hanqing Wu, Liz Zhao. (2015). Web Security, Auerbach Publications Session Fixation Demystified (2014)","title":"Session Fixation"},{"location":"archive/session-fixation/#session-fixation","text":"Session fixation and session hijacking are both attempts to gain access to a system as another user. causes a victim to use a session id chosen by an attacker","title":"Session Fixation"},{"location":"archive/session-fixation/#protection","text":"Delete the old session id and create a new session id, when authenticating a user. A sells a car to B A doesn't give all of the keys to B and keeps one If B doesn't change the lock, A could still use it. If the session id remains the same before and after log-in, it is vulnerable. specific to session implementations that use a session Id. Flask by default doesn't use a session Id.","title":"Protection"},{"location":"archive/session-fixation/#process","text":"Attacker A gives a session id to B After B authenticates, the server does not update the session id value A can use the session id to log in to B's account.","title":"Process"},{"location":"archive/session-fixation/#example","text":"Amazon When someone goes to Amazon they can add products in cart without logging in. When they decide to log in, Amazon links the unauthenticated session data with the authenticated user If Amazon did not create a new session id on authentication: an attacker might go to Amazon first get an unauthenticated session id fixate that session id in the victim browser and wait for it to log in after the victim logs in, with the attacker fixated session, the attacker refreshes their browser and they will be authenticated as the victim.","title":"Example"},{"location":"archive/session-fixation/#sources","text":"Hanqing Wu, Liz Zhao. (2015). Web Security, Auerbach Publications Session Fixation Demystified (2014)","title":"Sources"}]}